@page "/admin/audit-logs"
@using Microsoft.AspNetCore.Authorization
@using OutCom.Models
@using OutCom.Services
@inject IAuditService AuditService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Logs de Auditoría</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Logs de Auditoría</h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary" @onclick="LoadRecentLogs">
                        <i class="fas fa-refresh"></i> Actualizar
                    </button>
                    <button class="btn btn-outline-danger" @onclick="ShowCleanupModal">
                        <i class="fas fa-trash"></i> Limpiar Logs Antiguos
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(isError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                    @statusMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <!-- Filtros -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Filtros de Búsqueda</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label">Fecha Desde</label>
                            <input type="date" class="form-control" @bind="filterFromDate" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Fecha Hasta</label>
                            <input type="date" class="form-control" @bind="filterToDate" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Acción</label>
                            <select class="form-select" @bind="filterAction">
                                <option value="">-- Todas las acciones --</option>
                                @foreach (var action in Enum.GetValues<AuditAction>())
                                {
                                    <option value="@action">@GetActionDisplayName(action)</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Usuario</label>
                            <input type="text" class="form-control" placeholder="Email del usuario" @bind="filterUserEmail" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <button class="btn btn-primary" @onclick="ApplyFilters">
                                <i class="fas fa-search"></i> Buscar
                            </button>
                            <button class="btn btn-outline-secondary ms-2" @onclick="ClearFilters">
                                <i class="fas fa-times"></i> Limpiar Filtros
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lista de Logs -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Registro de Actividades</h5>
                </div>
                <div class="card-body">
                    @if (auditLogs == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (!auditLogs.Any())
                    {
                        <p class="text-muted">No se encontraron registros de auditoría.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Fecha/Hora</th>
                                        <th>Usuario</th>
                                        <th>Acción</th>
                                        <th>Descripción</th>
                                        <th>Usuario Afectado</th>
                                        <th>IP</th>
                                        <th>Estado</th>
                                        <th>Detalles</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var log in auditLogs)
                                    {
                                        <tr class="@(log.IsSuccessful ? "" : "table-danger")">
                                            <td>
                                                <small>
                                                    @log.Timestamp.ToString("dd/MM/yyyy")<br/>
                                                    @log.Timestamp.ToString("HH:mm:ss")
                                                </small>
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@log.UserEmail</strong>
                                                    <br/>
                                                    <small class="text-muted">@log.UserId</small>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge @GetActionBadgeClass(log.Action)">
                                                    @GetActionDisplayName(log.Action)
                                                </span>
                                            </td>
                                            <td>@log.Description</td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.TargetUserEmail))
                                                {
                                                    <div>
                                                        <strong>@log.TargetUserEmail</strong>
                                                        <br/>
                                                        <small class="text-muted">@log.TargetUserId</small>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <small>@log.IpAddress</small>
                                            </td>
                                            <td>
                                                @if (log.IsSuccessful)
                                                {
                                                    <span class="badge bg-success">Exitoso</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">Error</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(log.AdditionalData) || !string.IsNullOrEmpty(log.ErrorMessage))
                                                {
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ShowLogDetails(log)">
                                                        <i class="fas fa-info-circle"></i>
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para detalles del log -->
<div class="modal fade" id="logDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalles del Log de Auditoría</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (selectedLog != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Fecha/Hora:</strong>
                            <p>@selectedLog.Timestamp.ToString("dd/MM/yyyy HH:mm:ss")</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Acción:</strong>
                            <p><span class="badge @GetActionBadgeClass(selectedLog.Action)">@GetActionDisplayName(selectedLog.Action)</span></p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Usuario:</strong>
                            <p>@selectedLog.UserEmail (@selectedLog.UserId)</p>
                        </div>
                        <div class="col-md-6">
                            <strong>IP Address:</strong>
                            <p>@selectedLog.IpAddress</p>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <strong>User Agent:</strong>
                            <p class="text-break">@selectedLog.UserAgent</p>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedLog.TargetUserEmail))
                    {
                        <div class="row">
                            <div class="col-12">
                                <strong>Usuario Afectado:</strong>
                                <p>@selectedLog.TargetUserEmail (@selectedLog.TargetUserId)</p>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedLog.AdditionalData))
                    {
                        <div class="row">
                            <div class="col-12">
                                <strong>Datos Adicionales:</strong>
                                <pre class="bg-light p-2 rounded">@selectedLog.AdditionalData</pre>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedLog.ErrorMessage))
                    {
                        <div class="row">
                            <div class="col-12">
                                <strong>Mensaje de Error:</strong>
                                <div class="alert alert-danger">@selectedLog.ErrorMessage</div>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para limpiar logs -->
<div class="modal fade" id="cleanupModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Limpiar Logs Antiguos</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar los logs de auditoría anteriores a la fecha especificada?</p>
                <div class="mb-3">
                    <label class="form-label">Eliminar logs anteriores a:</label>
                    <input type="date" class="form-control" @bind="cleanupDate" />
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    Esta acción no se puede deshacer.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="CleanupOldLogs" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Eliminar Logs
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<AuditLog>? auditLogs;
    private AuditLog? selectedLog;
    private string statusMessage = string.Empty;
    private bool isError = false;
    private bool isProcessing = false;

    // Filtros
    private DateTime? filterFromDate;
    private DateTime? filterToDate;
    private AuditAction? filterAction;
    private string filterUserEmail = string.Empty;
    private DateTime cleanupDate = DateTime.Today.AddMonths(-3);

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentLogs();
    }

    private async Task LoadRecentLogs()
    {
        try
        {
            auditLogs = (await AuditService.GetRecentAuditLogsAsync(100)).ToList();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al cargar logs: {ex.Message}";
            isError = true;
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            auditLogs = (await AuditService.GetAuditLogsAsync(
                fromDate: filterFromDate,
                toDate: filterToDate,
                userId: string.IsNullOrEmpty(filterUserEmail) ? null : filterUserEmail,
                action: filterAction
            )).ToList();

            // Aplicar filtros adicionales en memoria si es necesario
            if (auditLogs != null)
            {
                var filteredLogs = auditLogs.AsEnumerable();

                if (filterAction.HasValue)
                {
                    filteredLogs = filteredLogs.Where(l => l.Action == filterAction.Value);
                }

                if (!string.IsNullOrEmpty(filterUserEmail))
                {
                    filteredLogs = filteredLogs.Where(l => l.UserEmail.Contains(filterUserEmail, StringComparison.OrdinalIgnoreCase));
                }

                auditLogs = filteredLogs.ToList();
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al aplicar filtros: {ex.Message}";
            isError = true;
        }
    }

    private async Task ClearFilters()
    {
        filterFromDate = null;
        filterToDate = null;
        filterAction = null;
        filterUserEmail = string.Empty;
        await LoadRecentLogs();
    }

    private async Task ShowLogDetails(AuditLog log)
    {
        selectedLog = log;
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('logDetailsModal')).show()");
    }

    private async Task ShowCleanupModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('cleanupModal')).show()");
    }

    private async Task CleanupOldLogs()
    {
        try
        {
            isProcessing = true;
            var daysToKeep = (int)(DateTime.Today - cleanupDate).TotalDays;
            await AuditService.CleanupOldLogsAsync(daysToKeep);
            statusMessage = $"Se eliminaron los registros de auditoría anteriores a {cleanupDate:dd/MM/yyyy}.";
            isError = false;
            await LoadRecentLogs();
            await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('cleanupModal')).hide()");
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al limpiar logs: {ex.Message}";
            isError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    private string GetActionDisplayName(AuditAction action)
    {
        return action switch
        {
            AuditAction.UserCreated => "Usuario Creado",
            AuditAction.UserUpdated => "Usuario Actualizado",
            AuditAction.UserDeleted => "Usuario Eliminado",
            AuditAction.UserActivated => "Usuario Activado",
            AuditAction.UserDeactivated => "Usuario Desactivado",
            AuditAction.PasswordChanged => "Contraseña Cambiada",
            AuditAction.RoleAssigned => "Rol Asignado",
            AuditAction.RoleRemoved => "Rol Removido",
            AuditAction.RoleCreated => "Rol Creado",
            AuditAction.RoleUpdated => "Rol Actualizado",
            AuditAction.RoleDeleted => "Rol Eliminado",
            AuditAction.Login => "Inicio de Sesión",
            AuditAction.Logout => "Cierre de Sesión",
            AuditAction.PermissionGranted => "Permiso Otorgado",
            AuditAction.PermissionRevoked => "Permiso Revocado",
            AuditAction.AdminActionPerformed => "Acción Administrativa",
            _ => action.ToString()
        };
    }

    private string GetActionBadgeClass(AuditAction action)
    {
        return action switch
        {
            AuditAction.UserCreated or AuditAction.RoleCreated => "bg-success",
            AuditAction.UserDeleted or AuditAction.RoleDeleted => "bg-danger",
            AuditAction.UserUpdated or AuditAction.RoleUpdated => "bg-warning",
            AuditAction.UserActivated => "bg-success",
            AuditAction.UserDeactivated => "bg-secondary",
            AuditAction.PasswordChanged => "bg-info",
            AuditAction.RoleAssigned or AuditAction.PermissionGranted => "bg-primary",
            AuditAction.RoleRemoved or AuditAction.PermissionRevoked => "bg-warning",
            AuditAction.Login => "bg-success",
            AuditAction.Logout => "bg-secondary",
            AuditAction.AdminActionPerformed => "bg-dark",
            _ => "bg-secondary"
        };
    }
}