@page "/admin/role-management"
@*@rendermode InteractiveServer*@
@using Microsoft.AspNetCore.Authorization
@using OutCom.Models
@using OutCom.Services
@using OutCom.Data
@using Microsoft.AspNetCore.Identity
@inject IRoleManagementService RoleManagementService
@inject IUserManagementService UserManagementService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Visualizaci贸n de Roles</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-1">Visualizaci贸n de Roles</h2>
                    <p class="text-muted mb-0">Consulta los roles del sistema y sus asignaciones</p>
                </div>
                <div class="d-flex align-items-center">
                    <span class="badge bg-info me-2">Solo Lectura</span>
                    <i class="fa fa-eye fa-2x text-primary"></i>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger d-flex align-items-center mb-4">
                    <i class="fa fa-exclamation-triangle me-2"></i>
                    <span>@errorMessage</span>
                </div>
            }

            @if (isLoading)
            {
                <div class="d-flex justify-content-center align-items-center py-5">
                    <div class="spinner-border text-primary me-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="text-muted">Cargando informaci贸n de roles...</span>
                </div>
            }
            else
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-4">
                            <i class="fa fa-tags text-primary fs-4 me-3"></i>
                            <h2 class="card-title mb-0">Roles de Identity</h2>
                        </div>
                        
                        @if (identityRoles != null && identityRoles.Any())
                        {
                            <div class="row">
                                @foreach (var role in identityRoles)
                                {
                                    var assignments = GetAssignmentsForRole(role.Id);
                                    <div class="col-md-6 col-lg-4 mb-3">
                                        <div class="card border">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center justify-content-between mb-3">
                                                    <div class="d-flex align-items-center">
                                                        <i class="@GetRoleIcon(role.Name ?? "") text-primary me-2"></i>
                                                        <h5 class="card-title mb-0">@role.Name</h5>
                                                    </div>
                                                    <span class="badge @GetRoleColor(role.Name ?? "")">
                                                        @assignments.Count usuarios
                                                    </span>
                                                </div>
                                                
                                                <div class="d-flex align-items-center justify-content-between small text-muted">
                                                    <span>Rol de Identity</span>
                                                    <span>ID: @role.Id</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fa fa-tags text-muted display-4 mb-3"></i>
                                <p class="text-muted">No se encontraron roles de Identity en el sistema</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Secci贸n de Asignaciones de Roles -->
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-4">
                            <i class="fa fa-users text-success fs-4 me-3"></i>
                            <h2 class="card-title mb-0">Asignaciones de Roles de Identity</h2>
                        </div>
                        
                        @if (identityUserRoleAssignments != null && identityUserRoleAssignments.Any())
                        {
                            <!-- Resumen por rol -->
                            <div class="mb-4">
                                <h3 class="h5 mb-3">Resumen por Rol</h3>
                                <div class="row">
                                    @foreach (var roleGroup in identityUserRoleAssignments.GroupBy(x => x.RoleName))
                                    {
                                        <div class="col-md-6 col-lg-4 mb-3">
                                            <div class="card border @GetRoleColor(roleGroup.Key)">
                                                <div class="card-body p-3">
                                                    <div class="d-flex align-items-center justify-content-between">
                                                        <div class="d-flex align-items-center">
                                                            <i class="@GetRoleIcon(roleGroup.Key) me-2"></i>
                                                            <span class="fw-medium">@roleGroup.Key</span>
                                                        </div>
                                                        <span class="fw-bold">@roleGroup.Count()</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <hr class="my-4">
                            
                            <!-- Lista detallada de asignaciones -->
                            <div>
                                <h3 class="h5 mb-3">Asignaciones Detalladas</h3>
                                <div class="list-group">
                                    @foreach (var assignment in identityUserRoleAssignments.Take(20))
                                    {
                                        <div class="list-group-item d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center">
                                                <div class="me-3">
                                                    <i class="@GetUserTypeIcon(assignment.UserType) @GetUserTypeColor(assignment.UserType.ToString()) fs-5"></i>
                                                </div>
                                                <div>
                                                    <div class="fw-medium">
                                                        @assignment.UserFirstName @assignment.UserLastName
                                                    </div>
                                                    <div class="small text-muted">@assignment.UserEmail</div>
                                                    <div class="small text-muted">Tipo: @assignment.UserType</div>
                                                </div>
                                            </div>
                                            <div>
                                                <span class="badge @GetRoleColor(assignment.RoleName)">
                                                    <i class="@GetRoleIcon(assignment.RoleName) me-1"></i>
                                                    @assignment.RoleName
                                                </span>
                                            </div>
                                        </div>
                                    }
                                </div>
                                
                                @if (identityUserRoleAssignments.Count > 20)
                                {
                                    <div class="alert alert-info text-center mt-3">
                                        <i class="fa fa-info-circle me-1"></i>
                                        Mostrando 20 de @identityUserRoleAssignments.Count asignaciones totales
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fa fa-users text-muted display-4 mb-3"></i>
                                <p class="text-muted">No se encontraron asignaciones de roles de Identity</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<IdentityRole> identityRoles = new();
    private List<IdentityUserRoleDto> identityUserRoleAssignments = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            identityRoles = (await RoleManagementService.GetAllIdentityRolesAsync()).ToList();
            identityUserRoleAssignments = (await RoleManagementService.GetAllIdentityUserRoleAssignmentsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<IdentityUserRoleDto> GetAssignmentsForRole(string roleId)
    {
        return identityUserRoleAssignments.Where(ura => ura.RoleId == roleId).ToList();
    }

    private string GetUserTypeIcon(UserType userType)
    {
        return userType switch
        {
            UserType.Admin => "fa fa-user-shield",
            UserType.Client => "fa fa-user",
            _ => "fa fa-user-circle"
        };
    }

    private string GetUserTypeColor(string userType)
    {
        return userType?.ToLower() switch
        {
            "admin" => "text-danger",
            "client" => "text-success",
            _ => "text-secondary"
        };
    }

    private string GetRoleIcon(string roleName)
    {
        return roleName.ToLower() switch
        {
            "admin" or "administrador" => "fa fa-crown",
            "manager" or "gerente" => "fa fa-briefcase",
            "employee" or "empleado" => "fa fa-user-tie",
            "customer" or "cliente" => "fa fa-user",
            _ => "fa fa-tag"
        };
    }

    private string GetRoleColor(string roleName)
    {
        return roleName?.ToLower() switch
        {
            "admin" or "administrator" => "bg-danger text-white",
            "manager" or "supervisor" => "bg-warning text-dark",
            "user" or "employee" => "bg-primary text-white",
            "guest" or "visitor" => "bg-secondary text-white",
            _ => "bg-info text-white"
        };
    }
}