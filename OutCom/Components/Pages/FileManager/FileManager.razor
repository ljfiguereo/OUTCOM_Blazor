@page "/file-manager"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using OutCom.Data
@using OutCom.Models
@using OutCom.Services
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject IFileManagerService fileManagerService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebHostEnvironment WebHostEnvironment
@attribute [Authorize]

<PageTitle>Administrador de Archivos</PageTitle>

<link href="/css/filemanager-fixes.css" rel="stylesheet" />

<div class="file-manager-container">
    <!-- Barra de herramientas minimalista y moderna -->
    <header class="fm-toolbar-modern">
        <!-- Sección superior: Navegación y estado -->
        <div class="fm-header-top">
            <!-- Navegación con breadcrumbs minimalista -->
            <nav class="fm-navigation" aria-label="Navegación de carpetas">
                <div class="fm-breadcrumb-container">
                    <button class="fm-breadcrumb-home" @onclick="() => NavigateToFolder(string.Empty)" title="Ir al inicio">
                        <i class="fe fe-home"></i>
                    </button>
                    @if (GetBreadcrumbPath().Any())
                    {
                        <div class="fm-breadcrumb-path">
                            @foreach (var (crumb, index) in GetBreadcrumbPath().Select((c, i) => (c, i)))
                            {
                                <span class="fm-breadcrumb-separator">/</span>
                                <button class="fm-breadcrumb-item" @onclick="() => NavigateToFolder(crumb.Path)" title="Ir a @crumb.Name">
                                    @crumb.Name
                                </button>
                            }
                        </div>
                    }
                </div>
            </nav>

            <!-- Indicador de selección minimalista -->
            <div class="fm-selection-status @(HasSelectedItems ? "visible" : "hidden")">
                <div class="fm-selection-badge">
                    <i class="fe fe-check-circle"></i>
                    <span class="fm-selection-count">@selectedItems.Count</span>
                </div>
                <span class="fm-selection-text">seleccionado@(selectedItems.Count != 1 ? "s" : "")</span>
            </div>
        </div>

        <!-- Sección principal: Acciones y controles -->
        <div class="fm-header-main">
            <!-- Grupo de acciones primarias -->
            <div class="fm-action-section">
                <div class="fm-primary-actions">
                    <button class="fm-action-btn fm-btn-create" @onclick="ShowCreateFolderModal" title="Nueva carpeta">
                        <i class="fe fe-folder-plus"></i>
                        <span class="fm-btn-text">Nueva carpeta</span>
                    </button>

                    <button class="fm-action-btn fm-btn-upload mb-0" title="Subir archivos">
                        <i class="fe fe-upload"></i>
                        <span class="fm-btn-text">Subir</span>
                        <InputFile OnChange="HandleMultipleFilesSelected" multiple class="fm-file-input" />
                    </button>
                </div>

                <!-- Acciones contextuales (aparecen cuando hay selección) -->
                <div class="fm-contextual-actions @(HasSelectedItems ? "visible" : "hidden")">
                    <button class="fm-action-btn fm-btn-share" @onclick="ShareSelectedItems" 
                            disabled="@(!HasSelectedItems)" title="Compartir elementos">
                        <i class="fe fe-share-2"></i>
                        <span class="fm-btn-text">Compartir</span>
                    </button>

                    <button class="fm-action-btn fm-btn-edit" @onclick="ShowMassEditModal" 
                            disabled="@(!HasSelectedFiles)" title="Editar fechas">
                        <i class="fe fe-calendar"></i>
                        <span class="fm-btn-text">Editar fechas</span>
                    </button>

                    <button class="fm-action-btn fm-btn-delete" @onclick="DeleteSelectedItems" 
                            disabled="@(!HasSelectedItems)" title="Eliminar elementos">
                        <i class="fe fe-trash-2"></i>
                        <span class="fm-btn-text">Eliminar</span>
                    </button>
                </div>
            </div>

            <!-- Controles de vista -->
            <div class="fm-view-controls">
                <div class="fm-view-selector">
                    <button class="fm-view-btn @(viewMode == "grid" ? "active" : "")" 
                            @onclick="@(() => SetViewMode("grid"))" title="Vista de cuadrícula">
                        <i class="fe fe-grid"></i>
                    </button>
                    <button class="fm-view-btn @(viewMode == "list" ? "active" : "")" 
                            @onclick="@(() => SetViewMode("list"))" title="Vista de lista">
                        <i class="fe fe-list"></i>
                    </button>
                    <button class="fm-view-btn @(viewMode == "details" ? "active" : "")" 
                            @onclick="@(() => SetViewMode("details"))" title="Vista detallada">
                        <i class="fe fe-menu"></i>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Área principal con sidebar y contenido -->
    <div class="main-area">
        <!-- Sidebar izquierdo - Árbol de directorios -->
        <div class="sidebar" style="z-index:0">
            <div class="sidebar-header">
                <h6><i class="fe fe-folder"></i> Directorios</h6>
            </div>
            <div class="directory-tree">
                @RenderDirectoryTree(directoryStructure)
            </div>
        </div>

        <!-- Panel principal de contenido -->
        <div class="content-panel" @ondrop="OnDrop" @ondragover="OnDragOver" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave">
            <!-- Área de arrastrar y soltar -->
            <div class="drop-zone @(isDragOver ? "drag-over" : "")">
                @if (isUploading)
                {
                    <div class="upload-progress">
                        <div class="spinner-border" role="status"></div>
                        <span>Subiendo archivos...</span>
                    </div>
                }

                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="alert alert-info alert-dismissible">
                        @statusMessage
                        <button type="button" class="btn-close" @onclick="() => statusMessage = null"></button>
                    </div>
                }

                <!-- Selector de todos -->
                @if (currentItems.Any())
                {
                    <div class="select-all-bar">
                        <label class="form-check">
                            <input type="checkbox" class="form-check-input"
                                   checked="@isAllSelected"
                                   @onchange="ToggleSelectAll" />
                            <span class="form-check-label">Seleccionar todo (@selectedItems.Count de @currentItems.Count)</span>
                        </label>
                    </div>
                }

                <!-- Contenido de archivos según el modo de vista -->
                <div class="file-content @viewMode-view">
                    @if (viewMode == "grid")
                    {
                        @RenderFileGridItems()
                    }
                    else if (viewMode == "list" || viewMode == "details")
                    {
                        @RenderFileListItems()
                    }
                </div>

                @if (!currentItems.Any())
                {
                    <div class="empty-folder">
                        <i class="fe fe-folder" style="font-size: 4rem; color: #ccc;"></i>
                        <p class="text-muted">Esta carpeta está vacía</p>
                        <p class="text-muted small">Arrastra archivos aquí o usa el botón "Subir" para agregar contenido</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear carpeta -->
@if (showCreateFolderModal)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nueva Carpeta</h5>
                    <button type="button" class="btn-close" @onclick="() => showCreateFolderModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Nombre de la carpeta:</label>
                        <input type="text" class="form-control" @bind="newFolderName" placeholder="Ingresa el nombre" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showCreateFolderModal = false">Cancelar</button>
                    <button class="btn btn-primary" @onclick="CreateFolder" disabled="@string.IsNullOrWhiteSpace(newFolderName)">Crear</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para compartir -->
@if (showShareModal)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Compartir Elementos</h5>
                    <button type="button" class="btn-close" @onclick="() => showShareModal = false"></button>
                </div>
                <div class="modal-body">
                    @if (selectedItems.Count == 1)
                    {
                        <p>Generar enlace para: <strong>@selectedItems.First().Name</strong></p>
                    }
                    else
                    {
                        <p>Generar enlaces para @selectedItems.Count elementos seleccionados</p>
                    }

                    @if (string.IsNullOrEmpty(generatedShareLink))
                    {
                        <button class="btn btn-primary" @onclick="GenerateShareLink">Generar Enlace</button>
                    }
                    else
                    {
                        <div class="alert alert-success">
                            <p><i class="fe fe-check-circle"></i> ¡Enlace generado exitosamente!</p>
                            <div class="input-group">
                                <input type="text" class="form-control" value="@generatedShareLink" readonly />
                                <button class="btn btn-outline-secondary" @onclick="() => CopyToClipboard(generatedShareLink)" title="Copiar">
                                    <i class="fe fe-copy"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showShareModal = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para vista previa de imágenes -->
@if (showImagePreviewModal && selectedImageForPreview != null)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fe fe-image"></i> Vista Previa - @(!string.IsNullOrEmpty(selectedImageForPreview.Title) ? selectedImageForPreview.Title : selectedImageForPreview.Name)
                    </h5>
                    <div class="d-flex gap-2">
                        @if (GetImageFiles().Count > 1)
                        {
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateImage(-1)" 
                                    disabled="@(!CanNavigateImage(-1))" title="Imagen anterior">
                                <i class="fe fe-chevron-left"></i>
                            </button>
                            <span class="align-self-center small text-muted">
                                @(GetCurrentImageIndex() + 1) de @GetImageFiles().Count
                            </span>
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateImage(1)" 
                                    disabled="@(!CanNavigateImage(1))" title="Imagen siguiente">
                                <i class="fe fe-chevron-right"></i>
                            </button>
                        }
                        <button type="button" class="btn-close" @onclick="() => CloseImagePreview()"></button>
                    </div>
                </div>
                <div class="modal-body text-center p-2">
                    <div class="image-preview-container position-relative">
                        <img src="@GetImagePreviewUrl(selectedImageForPreview)" 
                             alt="@selectedImageForPreview.Name" 
                             class="img-fluid image-preview-main" 
                             style="max-height: 75vh; object-fit: contain; cursor: zoom-in;" 
                             @onclick="ToggleImageZoom" />
                        
                        @if (isImageZoomed)
                        {
                            <div class="image-zoom-overlay" @onclick="ToggleImageZoom">
                                <img src="@GetImagePreviewUrl(selectedImageForPreview)" 
                                     alt="@selectedImageForPreview.Name" 
                                     class="img-fluid" 
                                     style="max-width: 100%; max-height: 100%; object-fit: contain;" />
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="d-flex justify-content-between w-100 align-items-center">
                        <div class="image-info">
                            <small class="text-muted">
                                <i class="fe fe-info"></i> 
                                @selectedImageForPreview.Name | 
                                Tamaño: @FormatFileSize(selectedImageForPreview.Size) | 
                                Modificado: @selectedImageForPreview.ModifiedDate.ToString("dd/MM/yyyy HH:mm")
                                @if (selectedImageForPreview.ExpirationDate.HasValue)
                                {
                                    <span class="@(selectedImageForPreview.ExpirationDate.Value < DateTime.Now ? "text-danger" : "text-warning")">
                                        | <i class="fe fe-clock"></i> Expira: @selectedImageForPreview.ExpirationDate.Value.ToString("dd/MM/yyyy")
                                    </span>
                                }
                            </small>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary" @onclick="() => ShowEditFileModal(selectedImageForPreview)">
                                <i class="fe fe-edit"></i> Editar
                            </button>
                            <button class="btn btn-outline-primary" @onclick="() => DownloadFile(selectedImageForPreview)">
                                <i class="fe fe-download"></i> Descargar
                            </button>
                            <button class="btn btn-secondary" @onclick="() => CloseImagePreview()">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para configurar archivos antes de subir -->
@if (showFileUploadConfigModal && pendingFiles.Any())
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fe fe-upload"></i> Configurar Archivos para Subir
                    </h5>
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge bg-light text-dark">@pendingFileConfigs.Count archivo(s)</span>
                        <button type="button" class="btn-close btn-close-white" @onclick="() => CancelFileUpload()"></button>
                    </div>
                </div>
                <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                    <!-- Configuración masiva al inicio -->
                    <div class="mass-config-section mb-4 p-3 bg-light border">
                        <h6 class="mb-3"><i class="fe fe-settings text-primary"></i> Configuración Masiva</h6>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Prefijo para títulos</label>
                                <input type="text" class="form-control" @bind="massTitlePrefix" 
                                       placeholder="Ej: Documento_" />
                                <small class="text-muted">Se agregará al inicio de cada título</small>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Fecha de expiración común</label>
                                <input type="datetime-local" class="form-control" @bind="massExpirationDate" 
                                       min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                            </div>
                            <div class="col-md-4 d-flex align-items-end gap-2">
                                <button class="btn btn-outline-primary" @onclick="ApplyMassConfiguration" 
                                        disabled="@(string.IsNullOrEmpty(massTitlePrefix) && massExpirationDate == null)">
                                    <i class="fe fe-copy"></i> Aplicar
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ClearMassConfiguration">
                                    <i class="fe fe-refresh-cw"></i> Limpiar
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Lista de archivos para configurar -->
                    <div class="upload-config-container">
                        @foreach (var (fileConfig, index) in pendingFileConfigs.Select((config, i) => (config, i)))
                        {
                            <div class="file-config-item mb-3 p-3 border @(string.IsNullOrWhiteSpace(fileConfig.Title) ? "border-danger" : "border-success")">
                                <div class="d-flex align-items-center justify-content-between mb-3">
                                    <div class="d-flex align-items-center">
                                        <span class="badge bg-secondary me-2">@(index + 1)</span>
                                        <i class="@GetFileIcon(new FileSystemItem { Name = fileConfig.FileName, IsDirectory = false }) me-2 text-primary"></i>
                                        <div>
                                            <strong>@fileConfig.FileName</strong>
                                            <div class="text-muted small">@FormatFileSize(fileConfig.FileSize)</div>
                                        </div>
                                    </div>
                                    <div class="file-config-status">
                                        @if (string.IsNullOrWhiteSpace(fileConfig.Title))
                                        {
                                            <span class="badge bg-danger"><i class="fe fe-alert-circle"></i> Incompleto</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success"><i class="fe fe-check"></i> Listo</span>
                                        }
                                    </div>
                                </div>
                                
                                <div class="row g-3">
                                    <div class="col-md-8">
                                        <label class="form-label">Título del archivo <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control @(string.IsNullOrWhiteSpace(fileConfig.Title) ? "is-invalid" : "is-valid")" 
                                               @bind="fileConfig.Title" @bind:event="oninput"
                                               placeholder="Ingrese un título descriptivo" 
                                               maxlength="100" required />
                                        @if (string.IsNullOrWhiteSpace(fileConfig.Title))
                                        {
                                            <div class="invalid-feedback">El título es obligatorio</div>
                                        }
                                        else
                                        {
                                            <div class="valid-feedback">Título válido</div>
                                        }
                                        <small class="text-muted">@(fileConfig.Title?.Length ?? 0)/100 caracteres</small>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label">Fecha de expiración</label>
                                        <input type="datetime-local" class="form-control" @bind="fileConfig.ExpirationDate" 
                                               min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                                        @if (fileConfig.ExpirationDate.HasValue)
                                        {
                                            <small class="text-warning">
                                                <i class="fe fe-clock"></i> Expira: @fileConfig.ExpirationDate.Value.ToString("dd/MM/yyyy HH:mm")
                                            </small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Sin fecha de expiración</small>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Resumen de configuración -->
                    <div class="config-summary mt-4 p-3 bg-azure-lightest bg-opacity-10 border border-info">
                        <h6 class="text-info"><i class="fe fe-info"></i> Resumen de Configuración</h6>
                        <div class="row">
                            <div class="col-md-4">
                                <small class="text-muted">Archivos configurados:</small><br>
                                <strong>@pendingFileConfigs.Count(c => !string.IsNullOrWhiteSpace(c.Title)) de @pendingFileConfigs.Count</strong>
                            </div>
                            <div class="col-md-4">
                                <small class="text-muted">Con fecha de expiración:</small><br>
                                <strong>@pendingFileConfigs.Count(c => c.ExpirationDate.HasValue)</strong>
                            </div>
                            <div class="col-md-4">
                                <small class="text-muted">Tamaño total:</small><br>
                                <strong>@FormatFileSize(pendingFileConfigs.Sum(c => c.FileSize))</strong>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <div class="d-flex justify-content-between w-100 align-items-center">
                        <div class="upload-progress-info">
                            @if (!AreAllFileConfigsValid())
                            {
                                <small class="text-danger">
                                    <i class="fe fe-alert-triangle"></i> 
                                    Complete todos los títulos obligatorios para continuar
                                </small>
                            }
                            else
                            {
                                <small class="text-success">
                                    <i class="fe fe-check-circle"></i> 
                                    Todos los archivos están listos para subir
                                </small>
                            }
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary" @onclick="() => CancelFileUpload()">
                                <i class="fe fe-x"></i> Cancelar
                            </button>
                            <button class="btn btn-primary" @onclick="() => ConfirmFileUpload()" 
                                    disabled="@(!AreAllFileConfigsValid())">
                                <i class="fe fe-upload"></i> Subir @pendingFileConfigs.Count Archivo(s)
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para editar propiedades de archivo individual -->
@if (showEditFileModal && selectedFileForEdit != null)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fe fe-edit"></i> Editar Propiedades - @selectedFileForEdit.Name
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => CloseEditFileModal()"></button>
                </div>
                <div class="modal-body">
                    <div class="edit-file-container">
                        <div class="mb-3">
                            <label class="form-label">Nombre del archivo</label>
                            <input type="text" class="form-control" value="@selectedFileForEdit.Name" readonly 
                                   style="background-color: #f8f9fa;" />
                            <small class="text-muted">El nombre del archivo no se puede cambiar</small>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Título personalizado <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" @bind="editFileTitle" 
                                   placeholder="Ingrese un título descriptivo" required />
                            @if (string.IsNullOrWhiteSpace(editFileTitle))
                            {
                                <small class="text-danger">El título es obligatorio</small>
                            }
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Fecha de expiración</label>
                            <input type="datetime-local" class="form-control" @bind="editFileExpirationDate" />
                            <small class="text-muted">Opcional - El archivo se eliminará automáticamente en esta fecha</small>
                            @if (editFileExpirationDate.HasValue)
                            {
                                <div class="mt-2">
                                    <small class="text-info">
                                        <i class="fe fe-clock"></i> 
                                        El archivo expirará el @editFileExpirationDate.Value.ToString("dd/MM/yyyy HH:mm")
                                    </small>
                                    <button type="button" class="btn btn-sm btn-outline-secondary ms-2" 
                                            @onclick="() => ClearExpirationDate()">
                                        <i class="fe fe-x"></i> Quitar fecha
                                    </button>
                                </div>
                            }
                        </div>
                        
                        <div class="file-info-section p-3 bg-azure-lightest">
                            <h6><i class="fe fe-info"></i> Información del archivo</h6>
                            <div class="row">
                                <div class="col-6">
                                    <small class="text-muted">Tamaño:</small><br>
                                    <span>@FormatFileSize(selectedFileForEdit.Size)</span>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">Última modificación:</small><br>
                                    <span>@selectedFileForEdit.ModifiedDate.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => CloseEditFileModal()">Cancelar</button>
                    <button class="btn btn-primary" @onclick="() => SaveFileProperties()" 
                            disabled="@(string.IsNullOrWhiteSpace(editFileTitle))">
                        <i class="fe fe-save"></i> Guardar Cambios
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para edición masiva de fechas de expiración -->
@if (showMassEditModal)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fe fe-calendar"></i> Edición Masiva de Fechas de Expiración
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => CloseMassEditModal()"></button>
                </div>
                <div class="modal-body">
                    <div class="mass-edit-container">
                        <div class="alert alert-info">
                            <i class="fe fe-info"></i>
                            Se aplicará la fecha de expiración a <strong>@selectedItems.Count archivo(s)</strong> seleccionado(s).
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Nueva fecha de expiración</label>
                            <input type="datetime-local" class="form-control" @bind="massEditExpirationDate" />
                            <small class="text-muted">Los archivos se eliminarán automáticamente en esta fecha</small>
                        </div>
                        
                        @if (massEditExpirationDate.HasValue)
                        {
                            <div class="expiration-preview p-3 bg-light mb-3">
                                <h6><i class="fe fe-clock"></i> Vista previa</h6>
                                <p class="mb-1">
                                    <strong>Fecha de expiración:</strong> @massEditExpirationDate.Value.ToString("dd/MM/yyyy HH:mm")
                                </p>
                                <p class="mb-0 text-muted">
                                    Los archivos expirarán en @GetTimeUntilExpiration(massEditExpirationDate.Value)
                                </p>
                            </div>
                        }
                        
                        <div class="selected-files-preview">
                            <h6><i class="fe fe-file"></i> Archivos seleccionados:</h6>
                            <div class="selected-files-list">
                                @foreach (var file in selectedItems.Take(5))
                                {
                                    <div class="selected-file-item">
                                        <i class="@GetFileIcon(file)"></i>
                                        <span>@file.Name</span>
                                        @if (file.ExpirationDate.HasValue)
                                        {
                                            <small class="text-muted">(Expira: @file.ExpirationDate.Value.ToString("dd/MM/yyyy"))</small>
                                        }
                                    </div>
                                }
                                @if (selectedItems.Count > 5)
                                {
                                    <div class="text-muted">... y @(selectedItems.Count - 5) archivo(s) más</div>
                                }
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="removeExistingDates" id="removeExistingDates">
                                <label class="form-check-label" for="removeExistingDates">
                                    Quitar fechas de expiración existentes (dejar sin fecha)
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => CloseMassEditModal()">Cancelar</button>
                    @if (removeExistingDates)
                    {
                        <button class="btn btn-warning" @onclick="() => ApplyMassExpirationEdit()">
                            <i class="fe fe-x-circle"></i> Quitar Fechas de Expiración
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="() => ApplyMassExpirationEdit()" 
                                disabled="@(!massEditExpirationDate.HasValue)">
                            <i class="fe fe-calendar"></i> Aplicar Fecha de Expiración
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
        // Variables de estado principales
    private string? userId;
    private string? selectedClientId;
    private string currentPath = "";
    private string viewMode = "grid";
    private bool isUploading = false;
    private bool isDragOver = false;
    private string? statusMessage;

    // Colecciones de datos
    private List<FileSystemItem> currentItems = new();
    private List<FileSystemItem> selectedItems = new();
    private List<DirectoryItem> directoryStructure = new();

    // Estados de modales
    private bool showShareModal = false;
    private bool showCreateFolderModal = false;
    private bool showImagePreviewModal = false;
    private bool showFileUploadConfigModal = false;
    private bool showEditFileModal = false;
    private bool showMassEditModal = false;
    private string newFolderName = "";
    private string generatedShareLink = "";
    private FileSystemItem? selectedImageForPreview = null;
    private bool isImageZoomed = false;
    private FileSystemItem? selectedFileForEdit = null;
    private string editFileTitle = "";
    private DateTime? editFileExpirationDate = null;
    private DateTime? massEditExpirationDate = null;
    private bool removeExistingDates = false;

    // Configuración de archivos para subir
    private List<IBrowserFile> pendingFiles = new();
    private List<FileUploadConfig> pendingFileConfigs = new();
    private DateTime? massExpirationDate = null;
    private string massTitlePrefix = string.Empty;

    // Propiedades calculadas
    private bool HasSelectedItems => selectedItems.Any();
    private bool isAllSelected => currentItems.Any() && selectedItems.Count == currentItems.Count;

    // Clases auxiliares
    public class FileSystemItem
    {
        public int? Id { get; set; }
        public string Name { get; set; } = "";
        public string Path { get; set; } = "";
        public bool IsDirectory { get; set; }
        public long Size { get; set; }
        public string Extension { get; set; } = "";
        public DateTime ModifiedDate { get; set; }
        public string? Title { get; set; }
        public DateTime? ExpirationDate { get; set; }
    }

    public class DirectoryItem
    {
        public string Name { get; set; } = "";
        public string Path { get; set; } = "";
        public bool IsExpanded { get; set; }
        public List<DirectoryItem> Children { get; set; } = new();
    }

    public class BreadcrumbItem
    {
        public string Name { get; set; } = "";
        public string Path { get; set; } = "";
    }

    public class FileUploadConfig
    {
        public string FileName { get; set; } = "";
        public long FileSize { get; set; }
        public string Title { get; set; } = "";
        public DateTime? ExpirationDate { get; set; }
        public IBrowserFile File { get; set; } = null!;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            await LoadCurrentDirectory();
            await LoadDirectoryStructure();
        }
    }

    private async Task LoadCurrentDirectory()
    {
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            var files = await fileManagerService.GetUserFilesAsync(userId, currentPath);
            currentItems = files.Select(f => new FileSystemItem
            {
                Id = f.Id,
                Name = f.Name,
                Path = f.Path,
                IsDirectory = f.Type == FileItemType.Folder,
                Size = f.Size,
                Extension = Path.GetExtension(f.Name) ?? "",
                ModifiedDate = f.ModifiedAt
            }).ToList();

            selectedItems.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al cargar directorio: {ex.Message}";
        }
    }

    private async Task LoadDirectoryStructure()
    {
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            var allFiles = await fileManagerService.GetUserFilesAsync(userId);
            var directories = allFiles.Where(f => f.Type == FileItemType.Folder).ToList();

            directoryStructure = BuildDirectoryTree(directories);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al cargar estructura de directorios: {ex.Message}";
        }
    }

    private List<DirectoryItem> BuildDirectoryTree(List<FileItem> directories)
    {
        var tree = new List<DirectoryItem>();
        var lookup = new Dictionary<string, DirectoryItem>();

        foreach (var dir in directories.OrderBy(d => d.Path))
        {
            var item = new DirectoryItem
            {
                Name = GetFolderName(dir.Path),
                Path = dir.Path
            };

            lookup[dir.Path] = item;

            var parentPath = GetParentPath(dir.Path);
            if (string.IsNullOrEmpty(parentPath))
            {
                tree.Add(item);
            }
            else if (lookup.ContainsKey(parentPath))
            {
                lookup[parentPath].Children.Add(item);
            }
        }

        return tree;
    }

    private string GetParentPath(string path)
    {
        if (string.IsNullOrEmpty(path)) return "";
        var lastSlash = path.LastIndexOf('/');
        return lastSlash > 0 ? path.Substring(0, lastSlash) : "";
    }

    private async Task HandleMultipleFilesSelected(InputFileChangeEventArgs e)
    {
        await PrepareFilesForUpload(e.GetMultipleFiles());
    }

    private async Task PrepareFilesForUpload(IReadOnlyList<IBrowserFile> files)
    {
        if (files.Count == 0) return;

        pendingFiles.Clear();
        pendingFileConfigs.Clear();

        foreach (var file in files)
        {
            // Validaciones básicas
            if (file.Size > 50 * 1024 * 1024) // 50MB límite
            {
                Console.WriteLine($"Archivo {file.Name} excede el tamaño máximo permitido (50MB)");
                continue;
            }

            pendingFiles.Add(file);
            pendingFileConfigs.Add(new FileUploadConfig
            {
                FileName = file.Name,
                FileSize = file.Size,
                Title = Path.GetFileNameWithoutExtension(file.Name), // Título por defecto
                File = file
            });
        }

        if (pendingFileConfigs.Any())
        {
            showFileUploadConfigModal = true;
            StateHasChanged();
        }
    }

    private async Task NavigateToFolder(string folderPath)
    {
        currentPath = folderPath;
        await LoadCurrentDirectory();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private void ToggleSelectAll()
    {
        if (isAllSelected)
        {
            selectedItems.Clear();
        }
        else
        {
            selectedItems = new List<FileSystemItem>(currentItems);
        }
        StateHasChanged();
    }

    private void ShowCreateFolderModal()
    {
        newFolderName = "";
        showCreateFolderModal = true;
    }

    private async Task CreateFolder()
    {
        if (string.IsNullOrWhiteSpace(newFolderName) || string.IsNullOrEmpty(userId))
            return;

        try
        {
            var folderPath = string.IsNullOrEmpty(currentPath)
                ? newFolderName
                : $"{currentPath}/{newFolderName}";

            await fileManagerService.CreateFolderAsync(newFolderName, currentPath, userId, selectedClientId);

            showCreateFolderModal = false;
            await LoadCurrentDirectory();
            await LoadDirectoryStructure();
            statusMessage = $"Carpeta '{newFolderName}' creada exitosamente.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al crear carpeta: {ex.Message}";
        }
    }

    private async Task DeleteSelectedItems()
    {
        if (!HasSelectedItems || string.IsNullOrEmpty(userId)) return;

        try
        {
            foreach (var item in selectedItems)
            {
                // Convertir FileSystemItem.Id a int para la llamada al servicio
                if (item.Id.HasValue)
                {
                    await fileManagerService.DeleteFileItemAsync(item.Id.Value, userId);
                }
            }

            await LoadCurrentDirectory();
            await LoadDirectoryStructure();
            statusMessage = $"Se eliminaron {selectedItems.Count} elemento(s) exitosamente.";
            selectedItems.Clear();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al eliminar elementos: {ex.Message}";
        }
    }

    private void ShareSelectedItems()
    {
        if (!HasSelectedItems) return;

        generatedShareLink = "";
        showShareModal = true;
    }

    private async Task GenerateShareLink()
    {
        if (!HasSelectedItems || string.IsNullOrEmpty(userId)) return;

        try
        {
            var firstItem = selectedItems.First();
            // Funcionalidad de compartir simplificada - generar enlace básico
            generatedShareLink = $"https://example.com/shared/{userId}/{firstItem.Path}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al generar enlace: {ex.Message}";
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        statusMessage = "Enlace copiado al portapapeles.";
    }

    private List<BreadcrumbItem> GetBreadcrumbPath()
    {
        if (string.IsNullOrEmpty(currentPath))
            return new List<BreadcrumbItem>();

        var parts = currentPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        var breadcrumbs = new List<BreadcrumbItem>();
        var currentBreadcrumbPath = "";

        foreach (var part in parts)
        {
            currentBreadcrumbPath = string.IsNullOrEmpty(currentBreadcrumbPath)
                ? part
                : $"{currentBreadcrumbPath}/{part}";

            breadcrumbs.Add(new BreadcrumbItem
            {
                Name = part,
                Path = currentBreadcrumbPath
            });
        }

        return breadcrumbs;
    }

    private string GetFolderName(string path)
    {
        if (string.IsNullOrEmpty(path)) return "";
        var lastSlash = path.LastIndexOf('/');
        return lastSlash >= 0 ? path.Substring(lastSlash + 1) : path;
    }

    private RenderFragment RenderDirectoryTree(List<DirectoryItem> items) => builder =>
    {
        var sequence = 0;

        foreach (var item in items)
        {
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "directory-item");

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", $"directory-node {(item.Path == currentPath ? "active" : "")}");
            builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => NavigateToFolder(item.Path)));

            if (item.Children.Any())
            {
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", item.IsExpanded ? "fe fe-chevron-down" : "fe fe-chevron-right");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleDirectoryExpansion(item)));
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", "directory-spacer");
                builder.CloseElement();
            }

            builder.OpenElement(sequence++, "i");
            builder.AddAttribute(sequence++, "class", "fe fe-folder");
            builder.CloseElement();

            builder.OpenElement(sequence++, "span");
            builder.AddContent(sequence++, item.Name);
            builder.CloseElement();

            builder.CloseElement(); // directory-node

            if (item.IsExpanded && item.Children.Any())
            {
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", "directory-children");
                builder.AddContent(sequence++, RenderDirectoryTree(item.Children));
                builder.CloseElement();
            }

            builder.CloseElement(); // directory-item
        }
    };

    private void ToggleDirectoryExpansion(DirectoryItem item)
    {
        item.IsExpanded = !item.IsExpanded;
        StateHasChanged();
    }

    private RenderFragment RenderFileGridItems() => builder =>
    {
        var sequence = 0;

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-grid-minimal");

        foreach (var item in currentItems)
        {
            var isSelected = selectedItems.Contains(item);

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", $"file-item-minimal {(isSelected ? "selected" : "")}");
            builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));

            // Checkbox de selección minimalista
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-checkbox-minimal");
            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "checkbox");
            builder.AddAttribute(sequence++, "class", "file-check-input");
            builder.AddAttribute(sequence++, "checked", isSelected);
            builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));
            builder.CloseElement();
            builder.CloseElement();

            // Contenedor de previsualización/icono
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-preview-container");

            if (IsImageFile(item))
            {
                // Previsualización de imagen
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", "file-image-preview");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowImagePreview(item)));
                builder.AddAttribute(sequence++, "title", "Click para vista previa completa");

                builder.OpenElement(sequence++, "img");
                builder.AddAttribute(sequence++, "src", GetImagePreviewUrl(item));
                builder.AddAttribute(sequence++, "alt", item.Name);
                builder.AddAttribute(sequence++, "class", "file-thumbnail");
                builder.AddAttribute(sequence++, "loading", "lazy");
                builder.CloseElement();

                // Overlay con icono de vista previa
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", "file-preview-overlay");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-eye");
                builder.CloseElement();
                builder.CloseElement();

                builder.CloseElement();
            }
            else
            {
                // Icono para archivos no-imagen
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", "file-icon-minimal");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", GetFileIcon(item));
                builder.CloseElement();
                builder.CloseElement();
            }

            builder.CloseElement(); // file-preview-container

            // Información del archivo
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-info-minimal");

            // Nombre del archivo
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-name-minimal");
            builder.AddAttribute(sequence++, "title", !string.IsNullOrEmpty(item.Title) ? $"{item.Title} ({item.Name})" : item.Name);
            builder.AddContent(sequence++, !string.IsNullOrEmpty(item.Title) ? item.Title : item.Name);
            builder.CloseElement();

            // Metadatos del archivo
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-meta-minimal");

            if (!item.IsDirectory)
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", "file-size-minimal");
                builder.AddContent(sequence++, FormatFileSize(item.Size));
                builder.CloseElement();
            }

            if (item.ExpirationDate.HasValue)
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", $"file-expiry-minimal {(item.ExpirationDate.Value < DateTime.Now ? "expired" : "warning")}");
                builder.AddAttribute(sequence++, "title", $"Expira: {item.ExpirationDate.Value:dd/MM/yyyy HH:mm}");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-clock");
                builder.CloseElement();
                builder.AddContent(sequence++, $" {item.ExpirationDate.Value:dd/MM}");
                builder.CloseElement();
            }

            builder.CloseElement(); // file-meta-minimal
            builder.CloseElement(); // file-info-minimal

            // Botón de edición (solo visible en hover)
            if (!item.IsDirectory)
            {
                builder.OpenElement(sequence++, "button");
                builder.AddAttribute(sequence++, "class", "file-edit-btn-minimal");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowEditFileModal(item)));
                builder.AddAttribute(sequence++, "title", "Editar propiedades");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-edit-2");
                builder.CloseElement();
                builder.CloseElement();
            }

            builder.CloseElement(); // file-item-minimal
        }

        builder.CloseElement(); // file-grid-minimal
    };

    private RenderFragment RenderFileListItems() => builder =>
    {
        var sequence = 0;

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list");

        // Header
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-header");

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell checkbox-cell");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell name-cell");
        builder.AddContent(sequence++, "Nombre");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell size-cell");
        builder.AddContent(sequence++, "Tamaño");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell type-cell");
        builder.AddContent(sequence++, "Tipo");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell date-cell");
        builder.AddContent(sequence++, "Fecha modificación");
        builder.CloseElement();

        builder.CloseElement(); // file-list-header

        // Items
        foreach (var item in currentItems)
        {
            var isSelected = selectedItems.Contains(item);

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", $"file-list-row {(isSelected ? "selected" : "")}");
            builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell checkbox-cell");

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "d-flex align-items-center gap-2");

            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "checkbox");
            builder.AddAttribute(sequence++, "class", "form-check-input");
            builder.AddAttribute(sequence++, "checked", isSelected);
            builder.CloseElement();

            if (!item.IsDirectory)
            {
                builder.OpenElement(sequence++, "button");
                builder.AddAttribute(sequence++, "class", "btn btn-sm btn-outline-primary");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowEditFileModal(item)));
                builder.AddAttribute(sequence++, "title", "Editar propiedades");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-edit");
                builder.CloseElement();
                builder.CloseElement();
            }

            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell name-cell");
            builder.OpenElement(sequence++, "i");
            builder.AddAttribute(sequence++, "class", GetFileIcon(item));
            if (IsImageFile(item))
            {
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowImagePreview(item)));
                builder.AddAttribute(sequence++, "style", "cursor: pointer;");
                builder.AddAttribute(sequence++, "title", "Click para vista previa");
            }
            builder.CloseElement();
            builder.AddContent(sequence++, " " + item.Name);
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell size-cell");
            builder.AddContent(sequence++, item.IsDirectory ? "-" : FormatFileSize(item.Size));
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell type-cell");
            builder.AddContent(sequence++, item.IsDirectory ? "Carpeta" : item.Extension.ToUpper());
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell date-cell");
            builder.AddContent(sequence++, item.ModifiedDate.ToString("dd/MM/yyyy HH:mm"));
            builder.CloseElement();

            builder.CloseElement(); // file-list-row
        }

        builder.CloseElement(); // file-list
    };

    private string GetFileIcon(FileSystemItem item)
    {
        if (item.IsDirectory)
            return "fe fe-folder";

        return item.Extension.ToLower() switch
        {
            ".pdf" => "fe fe-file-text",
            ".doc" or ".docx" => "fe fe-file-text",
            ".xls" or ".xlsx" => "fe fe-file-text",
            ".ppt" or ".pptx" => "fe fe-file-text",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => "fe fe-image",
            ".mp4" or ".avi" or ".mov" or ".wmv" => "fe fe-video",
            ".mp3" or ".wav" or ".flac" => "fe fe-music",
            ".zip" or ".rar" or ".7z" => "fe fe-archive",
            _ => "fe fe-file"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    // Métodos para vista previa de imágenes
    private bool IsImageFile(FileSystemItem item)
    {
        if (item.IsDirectory) return false;

        var extension = Path.GetExtension(item.Name).ToLowerInvariant();
        return extension == ".jpg" || extension == ".jpeg" || extension == ".png" ||
               extension == ".gif" || extension == ".bmp" || extension == ".webp" ||
               extension == ".svg" || extension == ".ico";
    }

    private void ShowImagePreview(FileSystemItem item)
    {
        if (IsImageFile(item))
        {
            selectedImageForPreview = item;
            showImagePreviewModal = true;
            StateHasChanged();
        }
    }

    private void CloseImagePreview()
    {
        showImagePreviewModal = false;
        selectedImageForPreview = null;
        isImageZoomed = false;
        StateHasChanged();
    }

    private void ToggleImageZoom()
    {
        isImageZoomed = !isImageZoomed;
        StateHasChanged();
    }

    private List<FileSystemItem> GetImageFiles()
    {
        return currentItems.Where(item => IsImageFile(item)).ToList();
    }

    private int GetCurrentImageIndex()
    {
        if (selectedImageForPreview == null) return -1;
        var imageFiles = GetImageFiles();
        return imageFiles.FindIndex(img => img.Name == selectedImageForPreview.Name);
    }

    private bool CanNavigateImage(int direction)
    {
        var imageFiles = GetImageFiles();
        var currentIndex = GetCurrentImageIndex();
        var newIndex = currentIndex + direction;
        return newIndex >= 0 && newIndex < imageFiles.Count;
    }

    private void NavigateImage(int direction)
    {
        if (!CanNavigateImage(direction)) return;

        var imageFiles = GetImageFiles();
        var currentIndex = GetCurrentImageIndex();
        var newIndex = currentIndex + direction;

        if (newIndex >= 0 && newIndex < imageFiles.Count)
        {
            selectedImageForPreview = imageFiles[newIndex];
            isImageZoomed = false; // Reset zoom when navigating
            StateHasChanged();
        }
    }

    private string GetImagePreviewUrl(FileSystemItem item)
    {
        // Construir la URL para la vista previa de la imagen
        var relativePath = Path.Combine(currentPath, item.Name).Replace("\\", "/");
        return $"/api/files/preview?path={Uri.EscapeDataString(relativePath)}";
    }

    private async Task DownloadFile(FileSystemItem item)
    {
        try
        {
            var relativePath = Path.Combine(currentPath, item.Name);
            var downloadUrl = $"/api/files/download?path={Uri.EscapeDataString(relativePath)}";

            // Usar JavaScript para iniciar la descarga
            await JSRuntime.InvokeVoidAsync("window.open", downloadUrl, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al descargar archivo: {ex.Message}");
            // Aquí podrías mostrar un mensaje de error al usuario
        }
    }

    // Métodos para configuración de archivos antes de subir
    private void CancelFileUpload()
    {
        showFileUploadConfigModal = false;
        pendingFiles.Clear();
        pendingFileConfigs.Clear();
        massExpirationDate = null;
        massTitlePrefix = string.Empty;
        StateHasChanged();
    }

    private async Task ConfirmFileUpload()
    {
        if (!AreAllFileConfigsValid()) return;

        try
        {
            foreach (var config in pendingFileConfigs)
            {
                await UploadFileWithConfig(config);
            }

            showFileUploadConfigModal = false;
            pendingFiles.Clear();
            pendingFileConfigs.Clear();
            massExpirationDate = null;
            massTitlePrefix = string.Empty;

            // Recargar el directorio actual
            await LoadCurrentDirectory();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al subir archivos: {ex.Message}");
        }
    }

    private bool AreAllFileConfigsValid()
    {
        return pendingFileConfigs.All(config => !string.IsNullOrWhiteSpace(config.Title));
    }

    private void ApplyMassExpirationDate()
    {
        if (massExpirationDate.HasValue)
        {
            foreach (var config in pendingFileConfigs)
            {
                config.ExpirationDate = massExpirationDate.Value;
            }
            StateHasChanged();
        }
    }

    private void ApplyMassConfiguration()
    {
        // Aplicar prefijo de título si está definido
        if (!string.IsNullOrEmpty(massTitlePrefix))
        {
            foreach (var config in pendingFileConfigs)
            {
                if (string.IsNullOrWhiteSpace(config.Title))
                {
                    config.Title = massTitlePrefix + Path.GetFileNameWithoutExtension(config.FileName);
                }
                else if (!config.Title.StartsWith(massTitlePrefix))
                {
                    config.Title = massTitlePrefix + config.Title;
                }
            }
        }

        // Aplicar fecha de expiración si está definida
        if (massExpirationDate.HasValue)
        {
            foreach (var config in pendingFileConfigs)
            {
                config.ExpirationDate = massExpirationDate.Value;
            }
        }

        StateHasChanged();
    }

    private void ClearMassConfiguration()
    {
        massTitlePrefix = string.Empty;
        massExpirationDate = null;
        StateHasChanged();
    }

    private async Task UploadFileWithConfig(FileUploadConfig config)
    {
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            // Validate file size (10MB max)
            const long maxFileSize = 10 * 1024 * 1024;
            if (config.FileSize > maxFileSize)
            {
                throw new Exception($"File {config.FileName} is too large. Maximum size: 10MB");
            }

            // Create file item with metadata
            var fileItem = new FileItem
            {
                Name = config.FileName,
                Title = config.Title,
                ExpirationDate = config.ExpirationDate,
                Size = config.FileSize,
                ModifiedAt = DateTime.Now,
                Path = Path.Combine(currentPath, config.FileName)
            };

            // Open stream and upload file with metadata
            using var stream = config.File.OpenReadStream(maxAllowedSize: maxFileSize);
            var result = await fileManagerService.SaveFileWithContentAsync(
                config.FileName,
                currentPath,
                stream,
                config.File.ContentType,
                userId,
                WebHostEnvironment.WebRootPath,
                selectedClientId
            );

            if (result == null)
            {
                throw new Exception($"Failed to upload file {config.FileName}");
            }

            // Update UI status
            statusMessage = $"File {config.FileName} uploaded successfully";
            await LoadCurrentDirectory();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error uploading file {config.FileName}: {ex.Message}";
            Console.WriteLine($"Upload error for {config.FileName}: {ex}");
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    // Métodos para editar propiedades de archivos individuales
    private void ShowEditFileModal(FileSystemItem file)
    {
        selectedFileForEdit = file;
        editFileTitle = file.Title ?? file.Name; // Usar título existente o nombre del archivo
        editFileExpirationDate = file.ExpirationDate;
        showEditFileModal = true;
        StateHasChanged();
    }

    private void CloseEditFileModal()
    {
        showEditFileModal = false;
        selectedFileForEdit = null;
        editFileTitle = "";
        editFileExpirationDate = null;
        StateHasChanged();
    }

    private void ClearExpirationDate()
    {
        editFileExpirationDate = null;
        StateHasChanged();
    }

    private async Task SaveFileProperties()
    {
        if (selectedFileForEdit == null || string.IsNullOrWhiteSpace(editFileTitle))
            return;

        try
        {
            // Aquí iría la lógica para actualizar las propiedades del archivo en el servidor
            // Por ahora, actualizamos localmente
            selectedFileForEdit.Title = editFileTitle.Trim();
            selectedFileForEdit.ExpirationDate = editFileExpirationDate;

            // Simular llamada al servidor
            await Task.Delay(300);

            CloseEditFileModal();

            // Mostrar mensaje de éxito (opcional)
            // Aquí podrías agregar un toast o notificación

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Manejar error
            Console.WriteLine($"Error updating file properties: {ex.Message}");
        }
    }

    // Métodos para edición masiva de fechas de expiración
    private void ShowMassEditModal()
    {
        if (!HasSelectedFiles) return;

        massEditExpirationDate = null;
        removeExistingDates = false;
        showMassEditModal = true;
        StateHasChanged();
    }

    private void CloseMassEditModal()
    {
        showMassEditModal = false;
        massEditExpirationDate = null;
        removeExistingDates = false;
        StateHasChanged();
    }

    private async Task ApplyMassExpirationEdit()
    {
        if (!HasSelectedFiles) return;

        try
        {
            foreach (var file in selectedItems.Where(f => !f.IsDirectory))
            {
                if (removeExistingDates)
                {
                    file.ExpirationDate = null;
                }
                else if (massEditExpirationDate.HasValue)
                {
                    file.ExpirationDate = massEditExpirationDate.Value;
                }
            }

            // Simular llamada al servidor
            await Task.Delay(500);

            CloseMassEditModal();

            var affectedCount = selectedItems.Count(f => !f.IsDirectory);
            statusMessage = removeExistingDates
                ? $"Se quitaron las fechas de expiración de {affectedCount} archivo(s)."
                : $"Se aplicó la fecha de expiración a {affectedCount} archivo(s).";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al actualizar fechas de expiración: {ex.Message}";
        }
    }

    private string GetTimeUntilExpiration(DateTime expirationDate)
    {
        var timeSpan = expirationDate - DateTime.Now;

        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays} día(s)";
        else if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours} hora(s)";
        else if (timeSpan.TotalMinutes >= 1)
            return $"{(int)timeSpan.TotalMinutes} minuto(s)";
        else
            return "menos de un minuto";
    }

    private bool HasSelectedFiles => selectedItems.Any(f => !f.IsDirectory);

    private void ToggleFileSelection(FileSystemItem item)
    {
        if (selectedItems.Contains(item))
        {
            selectedItems.Remove(item);
        }
        else
        {
            selectedItems.Add(item);
        }
        StateHasChanged();
    }

    private void NavigateUp()
    {
        if (string.IsNullOrEmpty(currentPath)) return;

        var lastSlash = currentPath.LastIndexOf('/');
        currentPath = lastSlash > 0 ? currentPath.Substring(0, lastSlash) : "";
        LoadCurrentDirectory();
    }

    private async Task OnDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "copy";
    }

    private async Task OnDragEnter(DragEventArgs e)
    {
        isDragOver = true;
        StateHasChanged();
    }

    private async Task OnDragLeave(DragEventArgs e)
    {
        isDragOver = false;
        StateHasChanged();
    }

    private async Task OnDrop(DragEventArgs e)
    {
        isDragOver = false;

        // En Blazor, el drag and drop directo de archivos es limitado
        // Por ahora, simplemente mostramos el modal de subida de archivos
        // Los usuarios pueden usar el botón "Subir" para seleccionar archivos
        showFileUploadConfigModal = true;

        StateHasChanged();
    }

    private async Task UploadSingleFile(IBrowserFile file)
    {
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            // Validar tamaño del archivo (10MB máximo)
            const long maxFileSize = 10 * 1024 * 1024;
            if (file.Size > maxFileSize)
            {
                statusMessage = $"El archivo {file.Name} es demasiado grande. Tamaño máximo: 10MB";
                StateHasChanged();
                return;
            }

            // Validar tipo de archivo (opcional - puedes agregar restricciones)
            var allowedExtensions = new[] { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".mp4", ".avi", ".mov", ".mp3", ".wav", ".txt", ".zip", ".rar" };
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            if (!allowedExtensions.Contains(fileExtension))
            {
                statusMessage = $"Tipo de archivo no permitido: {fileExtension}";
                StateHasChanged();
                return;
            }

            using var stream = file.OpenReadStream(maxAllowedSize: maxFileSize);
            var result = await fileManagerService.SaveFileWithContentAsync(
                file.Name,
                currentPath,
                stream,
                file.ContentType,
                userId,
                WebHostEnvironment.WebRootPath,
                selectedClientId
            );

            if (result != null)
            {
                statusMessage = $"Archivo {result.Name} subido correctamente";
                await LoadCurrentDirectory(); // Recargar la vista
            }
            else
            {
                statusMessage = $"Error al subir el archivo {file.Name}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al subir el archivo {file.Name}: {ex.Message}";
        }

        StateHasChanged();
    }
}
