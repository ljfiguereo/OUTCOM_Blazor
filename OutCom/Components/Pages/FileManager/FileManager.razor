@page "/file-manager"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using OutCom.Data
@using OutCom.Models
@using OutCom.Services
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject IFileManagerService fileManagerService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebHostEnvironment WebHostEnvironment
@attribute [Authorize]

<PageTitle>Administrador de Archivos</PageTitle>

<link href="/css/filemanager-fixes.css" rel="stylesheet" />

<div class="file-manager-container">
    <!-- Barra de herramientas minimalista y moderna -->
    <header class="fm-toolbar-modern">
        <!-- Sección superior: Navegación y estado -->
        <div class="fm-header-top">
            <!-- Navegación con breadcrumbs minimalista -->
            <nav class="fm-navigation" aria-label="Navegación de carpetas">
                <div class="fm-breadcrumb-container">
                    <button class="fm-breadcrumb-home" @onclick="() => NavigateToFolder(string.Empty)" title="Ir al inicio">
                        <i class="fe fe-home"></i>
                    </button>
                    @if (GetBreadcrumbPath().Any())
                    {
                        <div class="fm-breadcrumb-path">
                            @foreach (var (crumb, index) in GetBreadcrumbPath().Select((c, i) => (c, i)))
                            {
                                <span class="fm-breadcrumb-separator">/</span>
                                <button class="fm-breadcrumb-item" @onclick="() => NavigateToFolder(crumb.Path)"
                                        title="@(string.IsNullOrEmpty(crumb.ClientName) ? $"Ir a {crumb.Name}" : $"Ir a {crumb.Name} (Cliente: {crumb.ClientName})")
                                        ">
                                    @crumb.Name
                                    @if (!string.IsNullOrEmpty(crumb.ClientName))
                                    {
                                        <span class="fm-breadcrumb-client" title="Cliente: @crumb.ClientName">
                                            <i class="fe fe-user"></i>
                                            @crumb.ClientName
                                        </span>
                                    }
                                </button>
                            }
                        </div>
                    }
                </div>
            </nav>

            <!-- Indicador de selección minimalista -->
            <div class="fm-selection-status @(HasSelectedItems ? "visible" : "hidden")">
                <div class="fm-selection-badge">
                    <i class="fe fe-check-circle"></i>
                    <span class="fm-selection-count">@selectedItems.Count</span>
                </div>
                <span class="fm-selection-text">seleccionado@(selectedItems.Count != 1 ? "s" : "")</span>
            </div>
        </div>

        <!-- Sección principal: Acciones y controles -->
        <div class="fm-header-main">
            <!-- Grupo de acciones primarias -->
            <div class="fm-action-section">
                <div class="fm-primary-actions">
                    @if (isAdmin)
                    {
                        <button class="fm-action-btn fm-btn-create" @onclick="ShowCreateFolderModal"
                                title="@(isAdmin ? "Nueva carpeta" : "Solo los administradores pueden crear carpetas")"
                                disabled="@(!isAdmin)">
                            <i class="fe fe-folder-plus"></i>
                            <span class="fm-btn-text">Nueva carpeta</span>
                        </button>

                        <button class="fm-action-btn fm-btn-upload mb-0"
                                title="@(GetUploadButtonTitle())"
                                disabled="@(!isAdmin || IsInRootDirectory)">
                            <i class="fe fe-upload"></i>
                            <span class="fm-btn-text">Subir</span>
                            <InputFile OnChange="HandleMultipleFilesSelected" multiple class="fm-file-input" disabled="@(!isAdmin || IsInRootDirectory)" />
                        </button>
                    }
                    <button class="fm-action-btn fm-btn-print" @onclick="GeneratePDF"
                            title="@(GetPrintButtonTitle())"
                            disabled="@(isGeneratingPDF || !HasImageFiles())">
                        <i class="fe fe-printer"></i>
                        <span class="fm-btn-text">@(isGeneratingPDF ? "Generando..." : "Imprimir PDF")</span>
                    </button>
                </div>

                <!-- Acciones contextuales (aparecen cuando hay selección) -->
                <div class="fm-contextual-actions @(HasSelectedItems ? "visible" : "hidden")">
                    @if (isAdmin)
                    {
                        <button class="fm-action-btn fm-btn-edit" @onclick="ShowMassEditModal"
                                disabled="@(!HasSelectedFiles)" title="Editar fechas">
                            <i class="fe fe-calendar"></i>
                            <span class="fm-btn-text">Editar fechas</span>
                        </button>

                        <button class="fm-action-btn fm-btn-delete" @onclick="ShowDeleteConfirmModal"
                                disabled="@(!HasSelectedItems)" title="Eliminar elementos">
                            <i class="fe fe-trash-2"></i>
                            <span class="fm-btn-text">Eliminar</span>
                        </button>
                    }
                    else
                    {
                        <div class="alert alert-warning mt-2">
                            <i class="fe fe-info"></i>
                            <small>Solo puedes visualizar y generar reportes de tus archivos asignados.</small>
                        </div>
                    }
                </div>
            </div>

            <!-- Controles de vista -->
            <div class="fm-view-controls">
                <div class="fm-view-selector">
                    <button class="fm-view-btn @(viewMode == "grid" ? "active" : "")"
                            @onclick="@(() => SetViewMode("grid"))" title="Vista de cuadrícula">
                        <i class="fe fe-grid"></i>
                    </button>
                    @if (isAdmin)
                    {
                        <button class="fm-view-btn @(viewMode == "list" ? "active" : "")"
                                @onclick="@(() => SetViewMode("list"))" title="Vista de lista">
                            <i class="fe fe-list"></i>
                        </button>
                    }
                    </div>
            </div>
        </div>
    </header>

    <!-- Área principal con sidebar y contenido -->
    <div class="main-area">
        <!-- Sidebar izquierdo - Árbol de directorios -->
        <div class="sidebar" style="z-index:0">
            <div class="sidebar-header">
                <h6><i class="fe fe-folder"></i> Directorios</h6>
            </div>
            <div class="directory-tree">
                @RenderDirectoryTree(directoryStructure)
            </div>
        </div>

        <!-- Panel principal de contenido -->
        <div class="content-panel" @ondrop="@(IsInRootDirectory ? null : OnDrop)" @ondragover="@(IsInRootDirectory ? null : OnDragOver)" @ondragenter="@(IsInRootDirectory ? null : OnDragEnter)" @ondragleave="@(IsInRootDirectory ? null : OnDragLeave)">
            <!-- Área de arrastrar y soltar -->
            <div class="drop-zone @(isDragOver && !IsInRootDirectory ? "drag-over" : "") @(IsInRootDirectory ? "disabled" : "")">
                @*@if (IsInRootDirectory)
                {
                    <div class="alert alert-warning">
                        <i class="fe fe-alert-triangle"></i>
                        <strong>Restricción de subida:</strong> No se pueden subir archivos directamente en la raíz. Por favor, selecciona o crea una carpeta primero.
                    </div>
                }*@

                @if (isUploading)
                {
                    <div class="upload-progress">
                        <div class="spinner-border" role="status"></div>
                        <span>Subiendo archivos...</span>
                    </div>
                }

                @if (!string.IsNullOrEmpty(statusMessage))
                {
                    <div class="alert alert-info alert-dismissible fade show" role="alert">
                        @statusMessage
                        <button type="button" class="btn-close" @onclick="() => statusMessage = null"></button>
                    </div>
                }

                @if (isClient && !isAdmin)
                {
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title mb-0">
                                        <i class="fe fe-bar-chart-2"></i> Resumen de tus archivos
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-primary mb-1">@GetClientTotalFiles()</div>
                                                <div class="text-muted">Archivos totales</div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-info mb-1">@GetClientTotalFolders()</div>
                                                <div class="text-muted">Carpetas</div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-success mb-1">@FormatFileSize(GetClientTotalSize())</div>
                                                <div class="text-muted">Tamaño total</div>
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="text-center">
                                                <div class="h3 text-warning mb-1">@GetClientExpiringFiles()</div>
                                                <div class="text-muted">Por vencer (30 días)</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Selector de todos -->
                @if (currentItems.Any())
                {
                    <div class="select-all-bar">
                        <label class="form-check">
                            <input type="checkbox" class="form-check-input"
                                   checked="@isAllSelected"
                                   @onchange="ToggleSelectAll" />
                            <span class="form-check-label">Seleccionar todo (@selectedItems.Count de @currentItems.Count)</span>
                        </label>
                    </div>
                }

                <!-- Contenido de archivos según el modo de vista -->
                <div class="file-content @viewMode-view">
                    @if (viewMode == "grid")
                    {
                        @RenderFileGridItems()
                    }
                    else if (viewMode == "list" || viewMode == "details")
                    {
                        @RenderFileListItems()
                    }
                </div>

                @if (!currentItems.Any())
                {
                    <div class="empty-folder">
                        <i class="fe fe-folder" style="font-size: 4rem; color: #ccc;"></i>
                        @if (IsInRootDirectory)
                        {
                            <p class="text-muted">No hay carpetas creadas</p>
                            <p class="text-muted small">Crea una carpeta para comenzar a organizar tus archivos</p>
                        }
                        else
                        {
                            <p class="text-muted">Esta carpeta está vacía</p>
                            <p class="text-muted small">Arrastra archivos aquí o usa el botón "Subir" para agregar contenido</p>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear carpeta -->
@if (showCreateFolderModal)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fe fe-folder-plus"></i> Nueva Carpeta
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showCreateFolderModal = false"></button>
                </div>
                <div class="modal-body">
                    <!-- Información de ubicación actual -->
                    <div class="alert alert-info mb-3">
                        <i class="fe fe-info"></i>
                        <strong>Ubicación actual:</strong> 
                        @if (IsInRootDirectory)
                        {
                            <span>Carpeta raíz</span>
                        }
                        else
                        {
                            <span>@GetCurrentFolderDisplayName()</span>
                        }
                    </div>

                    @if (!isAdmin)
                    {
                        <div class="alert alert-warning">
                            <i class="fe fe-alert-triangle"></i>
                            <strong>Acceso restringido:</strong> Solo los administradores pueden crear carpetas.
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <label class="form-label">Nombre de la carpeta:</label>
                            <input type="text" class="form-control" @bind="newFolderName" placeholder="Ingresa el nombre" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Cliente asignado: <span class="text-danger">*</span></label>
                            <select class="form-select" @bind="selectedClientIdForNewFolder" required disabled="@(!IsInRootDirectory)">
                                <option value="">@(IsInRootDirectory ? "Selecciona un cliente..." : "Cliente heredado de la carpeta principal")</option>
                                @foreach (var client in availableClients)
                                {
                                    <option value="@client.Id">@client.FirstName @client.LastName</option>
                                }
                            </select>
                            @if (IsInRootDirectory)
                            {
                                <small class="text-muted">Cada carpeta debe estar asignada a un cliente específico</small>
                            }
                            else
                            {
                                <small class="text-muted">Las subcarpetas heredan automáticamente el cliente de la carpeta principal</small>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showCreateFolderModal = false">Cancelar</button>
                    @if (isAdmin)
                    {
                        <button class="btn btn-primary" @onclick="CreateFolder"
                                disabled="@(string.IsNullOrWhiteSpace(newFolderName) || string.IsNullOrEmpty(selectedClientIdForNewFolder))">
                            Crear
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para compartir -->
@if (showShareModal)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Compartir Elementos</h5>
                    <button type="button" class="btn-close" @onclick="() => showShareModal = false"></button>
                </div>
                <div class="modal-body">
                    @if (selectedItems.Count == 1)
                    {
                        <p>Generar enlace para: <strong>@selectedItems.First().Name</strong></p>
                    }
                    else
                    {
                        <p>Generar enlaces para @selectedItems.Count elementos seleccionados</p>
                    }

                    @if (string.IsNullOrEmpty(generatedShareLink))
                    {
                        <button class="btn btn-primary" @onclick="GenerateShareLink">Generar Enlace</button>
                    }
                    else
                    {
                        <div class="alert alert-success">
                            <p><i class="fe fe-check-circle"></i> ¡Enlace generado exitosamente!</p>
                            <div class="input-group">
                                <input type="text" class="form-control" value="@generatedShareLink" readonly />
                                <button class="btn btn-outline-secondary" @onclick="() => CopyToClipboard(generatedShareLink)" title="Copiar">
                                    <i class="fe fe-copy"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => showShareModal = false">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para vista previa de imágenes -->
@if (showImagePreviewModal && selectedImageForPreview != null)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fe fe-image"></i> Vista Previa - @(!string.IsNullOrEmpty(selectedImageForPreview.Title) ? selectedImageForPreview.Title : selectedImageForPreview.Name)
                    </h5>
                    <div class="d-flex gap-2">
                        @if (GetImageFiles().Count > 1)
                        {
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateImage(-1)"
                                    disabled="@(!CanNavigateImage(-1))" title="Imagen anterior">
                                <i class="fe fe-chevron-left"></i>
                            </button>
                            <span class="align-self-center small text-muted">
                                @(GetCurrentImageIndex() + 1) de @GetImageFiles().Count
                            </span>
                            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateImage(1)"
                                    disabled="@(!CanNavigateImage(1))" title="Imagen siguiente">
                                <i class="fe fe-chevron-right"></i>
                            </button>
                        }
                        <button type="button" class="btn-close" @onclick="() => CloseImagePreview()"></button>
                    </div>
                </div>
                <div class="modal-body text-center p-2">
                    <div class="image-preview-container position-relative">
                        <img src="@GetImagePreviewUrl(selectedImageForPreview)"
                             alt="@selectedImageForPreview.Name"
                             class="img-fluid image-preview-main"
                             style="max-height: 60vh; object-fit: contain; cursor: zoom-in;"
                             @onclick="ToggleImageZoom" />

                        @if (isImageZoomed)
                        {
                            <div class="image-zoom-overlay" @onclick="ToggleImageZoom">
                                <img src="@GetImagePreviewUrl(selectedImageForPreview)"
                                     alt="@selectedImageForPreview.Name"
                                     class="img-fluid"
                                     style="max-width: 100%; max-height: 100%; object-fit: contain;" />
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="d-flex justify-content-between w-100 align-items-center">
                        <div class="image-info">
                            <small class="text-muted">
                                <i class="fe fe-info"></i>
                                @selectedImageForPreview.Name |
                                Tamaño: @FormatFileSize(selectedImageForPreview.Size) |
                                Modificado: @selectedImageForPreview.ModifiedDate.ToString("dd/MM/yyyy HH:mm")
                                @if (selectedImageForPreview.ExpirationDate.HasValue)
                                {
                                    <span class="@(selectedImageForPreview.ExpirationDate.Value < DateTime.Now ? "text-danger" : "text-warning")">
                                        | <i class="fe fe-clock"></i> Expira: @selectedImageForPreview.ExpirationDate.Value.ToString("dd/MM/yyyy")
                                    </span>
                                }
                            </small>
                        </div>
                        <div class="d-flex gap-2">
                            @if (isAdmin)
                            {
                                <button class="btn btn-outline-secondary" @onclick="() => ShowEditFileModal(selectedImageForPreview)">
                                    <i class="fe fe-edit"></i> Editar
                                </button>
                            }
                            <button class="btn btn-outline-primary" @onclick="() => DownloadFile(selectedImageForPreview)">
                                <i class="fe fe-download"></i> Descargar
                            </button>
                            <button class="btn btn-secondary" @onclick="() => CloseImagePreview()">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para configurar archivos antes de subir -->
@if (showFileUploadConfigModal && pendingFiles.Any())
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white" style="background:var(--fm-primary-light) !important">
                    <h5 class="modal-title">
                        <i class="fe fe-upload"></i> Configurar Archivos para Subir
                    </h5>
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge bg-light text-dark">@pendingFileConfigs.Count archivo(s)</span>
                        <button type="button" class="btn-close btn-close-white" @onclick="() => CancelFileUpload()"></button>
                    </div>
                </div>
                <div class="modal-body" style="max-height: 70vh; overflow-y: auto;">
                    <!-- Configuración masiva al inicio -->
                    <div class="mass-config-section mb-4 p-3 bg-light border">
                        <h6 class="mb-3"><i class="fe fe-settings text-primary"></i> Configuración Masiva</h6>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Prefijo para títulos</label>
                                <input type="text" class="form-control" @bind="massTitlePrefix"
                                       placeholder="Ej: Documento_" />
                                <small class="text-muted">Se agregará al inicio de cada título</small>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Fecha de expiración común</label>
                                <input type="datetime-local" class="form-control" @bind="massExpirationDate"
                                       min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                            </div>
                            <div class="col-md-4 d-flex align-items-end gap-2">
                                <button class="btn btn-outline-primary" @onclick="ApplyMassConfiguration"
                                        disabled="@(string.IsNullOrEmpty(massTitlePrefix) && massExpirationDate == null)">
                                    <i class="fe fe-copy"></i> Aplicar
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ClearMassConfiguration">
                                    <i class="fe fe-refresh-cw"></i> Limpiar
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Lista de archivos para configurar -->
                    <div class="upload-config-container">
                        @foreach (var (fileConfig, index) in pendingFileConfigs.Select((config, i) => (config, i)))
                        {
                            <div class="file-config-item mb-3 p-3 border @(string.IsNullOrWhiteSpace(fileConfig.Title) ? "border-danger" : "border-success")">
                                <div class="d-flex align-items-center justify-content-between mb-3">
                                    <div class="d-flex align-items-center">
                                        <span class="badge bg-secondary me-2">@(index + 1)</span>
                                        <i class="@GetFileIcon(new FileSystemItem { Name = fileConfig.FileName, IsDirectory = false }) me-2 text-primary"></i>
                                        <div>
                                            <strong>@fileConfig.FileName</strong>
                                            <div class="text-muted small">@FormatFileSize(fileConfig.FileSize)</div>
                                        </div>
                                    </div>
                                    <div class="file-config-status">
                                        @if (string.IsNullOrWhiteSpace(fileConfig.Title))
                                        {
                                            <span class="badge bg-danger"><i class="fe fe-alert-circle"></i> Incompleto</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success"><i class="fe fe-check"></i> Listo</span>
                                        }
                                    </div>
                                </div>

                                <div class="row g-3">
                                    <div class="col-md-8">
                                        <label class="form-label">Título del archivo <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control @(string.IsNullOrWhiteSpace(fileConfig.Title) ? "is-invalid" : "is-valid")"
                                               @bind="fileConfig.Title" @bind:event="oninput"
                                               placeholder="Ingrese un título descriptivo"
                                               maxlength="100" required />
                                        @if (string.IsNullOrWhiteSpace(fileConfig.Title))
                                        {
                                            <div class="invalid-feedback">El título es obligatorio</div>
                                        }
                                        else
                                        {
                                            <div class="valid-feedback">Título válido</div>
                                        }
                                        <small class="text-muted">@(fileConfig.Title?.Length ?? 0)/100 caracteres</small>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label">Fecha de expiración</label>
                                        <input type="datetime-local" class="form-control" @bind="fileConfig.ExpirationDate"
                                               min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                                        @if (fileConfig.ExpirationDate.HasValue)
                                        {
                                            <small class="text-warning">
                                                <i class="fe fe-clock"></i> Expira: @fileConfig.ExpirationDate.Value.ToString("dd/MM/yyyy HH:mm")
                                            </small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Sin fecha de expiración</small>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Resumen de configuración -->
                    <div class="config-summary mt-4 p-3 bg-azure-lightest bg-opacity-10 border border-info">
                        <h6 class="text-info"><i class="fe fe-info"></i> Resumen de Configuración</h6>
                        <div class="row">
                            <div class="col-md-4">
                                <small class="text-muted">Archivos configurados:</small><br>
                                <strong>@pendingFileConfigs.Count(c => !string.IsNullOrWhiteSpace(c.Title)) de @pendingFileConfigs.Count</strong>
                            </div>
                            <div class="col-md-4">
                                <small class="text-muted">Con fecha de expiración:</small><br>
                                <strong>@pendingFileConfigs.Count(c => c.ExpirationDate.HasValue)</strong>
                            </div>
                            <div class="col-md-4">
                                <small class="text-muted">Tamaño total:</small><br>
                                <strong>@FormatFileSize(pendingFileConfigs.Sum(c => c.FileSize))</strong>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <div class="d-flex justify-content-between w-100 align-items-center">
                        <div class="upload-progress-info">
                            @if (!AreAllFileConfigsValid())
                            {
                                <small class="text-danger">
                                    <i class="fe fe-alert-triangle"></i>
                                    Complete todos los títulos obligatorios para continuar
                                </small>
                            }
                            else
                            {
                                <small class="text-success">
                                    <i class="fe fe-check-circle"></i>
                                    Todos los archivos están listos para subir
                                </small>
                            }
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary" @onclick="() => CancelFileUpload()">
                                <i class="fe fe-x"></i> Cancelar
                            </button>
                            <button class="btn btn-primary" @onclick="() => ConfirmFileUpload()"
                                    disabled="@(!AreAllFileConfigsValid())">
                                <i class="fe fe-upload"></i> Subir @pendingFileConfigs.Count Archivo(s)
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para editar propiedades de archivo individual -->
@if (showEditFileModal && selectedFileForEdit != null)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fe fe-edit"></i> Editar Propiedades - @selectedFileForEdit.Name
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => CloseEditFileModal()"></button>
                </div>
                <div class="modal-body">
                    <div class="edit-file-container">
                        <div class="mb-3">
                            <label class="form-label">Nombre del archivo</label>
                            <input type="text" class="form-control" value="@selectedFileForEdit.Name" readonly
                                   style="background-color: #f8f9fa;" />
                            <small class="text-muted">El nombre del archivo no se puede cambiar</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Título personalizado <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" @bind="editFileTitle"
                                   placeholder="Ingrese un título descriptivo" required />
                            @if (string.IsNullOrWhiteSpace(editFileTitle))
                            {
                                <small class="text-danger">El título es obligatorio</small>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Fecha de expiración</label>
                            <input type="datetime-local" class="form-control" @bind="editFileExpirationDate" />
                            <small class="text-muted">Opcional - El archivo se eliminará automáticamente en esta fecha</small>
                            @if (editFileExpirationDate.HasValue)
                            {
                                <div class="mt-2">
                                    <small class="text-info">
                                        <i class="fe fe-clock"></i>
                                        El archivo expirará el @editFileExpirationDate.Value.ToString("dd/MM/yyyy HH:mm")
                                    </small>
                                    <button type="button" class="btn btn-sm btn-outline-secondary ms-2"
                                            @onclick="() => ClearExpirationDate()">
                                        <i class="fe fe-x"></i> Quitar fecha
                                    </button>
                                </div>
                            }
                        </div>

                        <div class="file-info-section p-3 bg-azure-lightest">
                            <h6><i class="fe fe-info"></i> Información del archivo</h6>
                            <div class="row">
                                <div class="col-6">
                                    <small class="text-muted">Tamaño:</small><br>
                                    <span>@FormatFileSize(selectedFileForEdit.Size)</span>
                                </div>
                                <div class="col-6">
                                    <small class="text-muted">Última modificación:</small><br>
                                    <span>@selectedFileForEdit.ModifiedDate.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => CloseEditFileModal()">Cancelar</button>
                    <button class="btn btn-primary" @onclick="() => SaveFileProperties()"
                            disabled="@(string.IsNullOrWhiteSpace(editFileTitle))">
                        <i class="fe fe-save"></i> Guardar Cambios
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal para edición masiva de fechas de expiración -->
@if (showMassEditModal)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fe fe-calendar"></i> Edición Masiva de Fechas de Expiración
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => CloseMassEditModal()"></button>
                </div>
                <div class="modal-body">
                    <div class="mass-edit-container">
                        <div class="alert alert-info">
                            <i class="fe fe-info"></i>
                            Se aplicará la fecha de expiración a <strong>@selectedItems.Count archivo(s)</strong> seleccionado(s).
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Nueva fecha de expiración</label>
                            <input type="datetime-local" class="form-control" @bind="massEditExpirationDate" />
                            <small class="text-muted">Los archivos se eliminarán automáticamente en esta fecha</small>
                        </div>

                        @if (massEditExpirationDate.HasValue)
                        {
                            <div class="expiration-preview p-3 bg-light mb-3">
                                <h6><i class="fe fe-clock"></i> Vista previa</h6>
                                <p class="mb-1">
                                    <strong>Fecha de expiración:</strong> @massEditExpirationDate.Value.ToString("dd/MM/yyyy HH:mm")
                                </p>
                                <p class="mb-0 text-muted">
                                    Los archivos expirarán en @GetTimeUntilExpiration(massEditExpirationDate.Value)
                                </p>
                            </div>
                        }

                        <div class="selected-files-preview">
                            <h6><i class="fe fe-file"></i> Archivos seleccionados:</h6>
                            <div class="selected-files-list">
                                @foreach (var file in selectedItems.Take(5))
                                {
                                    <div class="selected-file-item">
                                        <i class="@GetFileIcon(file)"></i>
                                        <span>@file.Name</span>
                                        @if (file.ExpirationDate.HasValue)
                                        {
                                            <small class="text-muted">(Expira: @file.ExpirationDate.Value.ToString("dd/MM/yyyy"))</small>
                                        }
                                    </div>
                                }
                                @if (selectedItems.Count > 5)
                                {
                                    <div class="text-muted">... y @(selectedItems.Count - 5) archivo(s) más</div>
                                }
                            </div>
                        </div>

                        <div class="mt-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="removeExistingDates" id="removeExistingDates">
                                <label class="form-check-label" for="removeExistingDates">
                                    Quitar fechas de expiración existentes (dejar sin fecha)
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => CloseMassEditModal()">Cancelar</button>
                    @if (removeExistingDates)
                    {
                        <button class="btn btn-warning" @onclick="() => ApplyMassExpirationEdit()">
                            <i class="fe fe-x-circle"></i> Quitar Fechas de Expiración
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="() => ApplyMassExpirationEdit()"
                                disabled="@(!massEditExpirationDate.HasValue)">
                            <i class="fe fe-calendar"></i> Aplicar Fecha de Expiración
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Modal de confirmación para eliminar elementos -->
@if (showDeleteConfirmModal)
{
    <div class="modal fade show" style="display:block" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-red-lighter text-white">
                    <h5 class="modal-title">
                        <i class="fe fe-alert-triangle"></i> Confirmar Eliminación
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => CloseDeleteConfirmModal()"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning d-block text-center">
                        <i class="fa fa-exclamation-triangle me-2"></i>
                        <strong>
                            ¿Realmente desea eliminar estos archivos?
                        </strong>
                    </div>

                    <!-- Lista de elementos a eliminar -->
                    <div class="delete-items-list">
                        <h6 class="mb-3">
                            <i class="fe fe-list"></i> Elementos seleccionados (@itemsToDelete.Count):
                        </h6>
                        
                        <div class="list-group mb-3" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var item in itemsToDelete.OrderByDescending(x=> x.IsDirectory))
                            {
                                <div class="list-group-item d-flex align-items-center">
                                    <i class="@GetFileIcon(item) me-2 @(item.IsDirectory ? "text-warning" : "text-primary")"></i>
                                    <div class="flex-grow-1">
                                        <div class="fw-bold">@item.Name</div>
                                        <small class="text-muted">
                                            @if (item.IsDirectory)
                                            {
                                                <span>Carpeta</span>
                                            }
                                            else
                                            {
                                                <span>Archivo - @FormatFileSize(item.Size)</span>
                                            }
                                            | Modificado: @item.ModifiedDate.ToString("dd/MM/yyyy HH:mm")
                                        </small>
                                    </div>
                                    @if (item.IsDirectory)
                                    {
                                        <span class="badge bg-warning text-dark">
                                            <i class="fe fe-folder"></i> Carpeta
                                        </span>
                                    }
                                </div>
                            }
                        </div>

                        <!-- Resumen de eliminación -->
                        <div class="deletion-summary mt-3 p-3 bg-danger-transparent bg-opacity-10 border border-danger">
                            <h6 class="text-danger">
                                <i class="fe fe-trash-2"></i> Resumen de eliminación:
                            </h6>
                            <div class="row">
                                <div class="col-md-4">
                                    <small class="text-muted">Archivos:</small><br>
                                    <strong>@(itemsToDelete.Count(x => !x.IsDirectory) + folderContents.Count(x => !x.IsDirectory))</strong>
                                </div>
                                <div class="col-md-4">
                                    <small class="text-muted">Carpetas:</small><br>
                                    <strong>@(itemsToDelete.Count(x => x.IsDirectory) + folderContents.Count(x => x.IsDirectory))</strong>
                                </div>
                                <div class="col-md-4">
                                    <small class="text-muted">Tamaño total:</small><br>
                                    <strong>@FormatFileSize(itemsToDelete.Where(x => !x.IsDirectory).Sum(x => x.Size) + folderContents.Where(x => !x.IsDirectory).Sum(x => x.Size))</strong>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => CloseDeleteConfirmModal()">
                        <i class="fe fe-x"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="() => ConfirmDeleteItems()" 
                            disabled="@isLoadingFolderContents">
                        <i class="fe fe-trash-2"></i> Eliminar Permanentemente
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // Variables de estado principales
    private string? userId;
    private string? selectedClientId;
    private string currentPath = "";
    private string viewMode = "grid";
    private bool isUploading = false;
    private bool isDragOver = false;
    private string? statusMessage;
    private bool isAdmin = false;
    private bool isClient = false;

    // Variables para manejo de clientes
    private List<ApplicationUser> availableClients = new();
    private string? selectedClientIdForNewFolder;

    // Colecciones de datos
    private List<FileSystemItem> currentItems = new();
    private List<FileSystemItem> selectedItems = new();
    private List<DirectoryItem> directoryStructure = new();

    // Estados de modales
    private bool showShareModal = false;
    private bool showCreateFolderModal = false;
    private bool showImagePreviewModal = false;
    private bool showFileUploadConfigModal = false;
    private bool showEditFileModal = false;
    private bool showMassEditModal = false;
    private bool showDeleteConfirmModal = false;
    private string newFolderName = "";
    private string generatedShareLink = "";
    private FileSystemItem? selectedImageForPreview = null;
    private bool isImageZoomed = false;
    private FileSystemItem? selectedFileForEdit = null;
    private string editFileTitle = "";
    private DateTime? editFileExpirationDate = null;
    private DateTime? massEditExpirationDate = null;
    private bool removeExistingDates = false;
    
    // Variables para modal de confirmación de eliminación
    private List<FileSystemItem> itemsToDelete = new();
    private List<FileSystemItem> folderContents = new();
    private bool isLoadingFolderContents = false;

    // Variables para generación de PDF
    private bool isGeneratingPDF = false;

    // Configuración de archivos para subir
    private List<IBrowserFile> pendingFiles = new();
    private List<FileUploadConfig> pendingFileConfigs = new();
    private DateTime? massExpirationDate = null;
    private string massTitlePrefix = string.Empty;

    // Propiedades calculadas
    private bool HasSelectedItems => selectedItems.Any();
    private bool isAllSelected => currentItems.Any() && selectedItems.Count == currentItems.Count;
    private bool IsInRootDirectory => string.IsNullOrEmpty(currentPath);
    
    private string GetCurrentFolderDisplayName()
    {
        if (IsInRootDirectory)
            return "Carpeta raíz";
        
        var pathParts = currentPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        return pathParts.LastOrDefault() ?? "Carpeta raíz";
    }
    
    private string GetCurrentFolderClientId()
    {
        if (IsInRootDirectory)
            return string.Empty;
        
        // Obtener el cliente de la carpeta raíz del path actual
        var pathParts = currentPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (pathParts.Length > 0)
        {
            var rootFolderName = pathParts[0];
            
            // Buscar en todos los elementos cargados una carpeta con ese nombre en la raíz
            // que tenga ClientId asignado
            var rootFolderItem = currentItems.FirstOrDefault(item => 
                item.IsDirectory && 
                item.Name == rootFolderName && 
                !string.IsNullOrEmpty(item.ClientId));
            
            if (rootFolderItem != null)
                return rootFolderItem.ClientId;
            
            // Si no se encuentra en currentItems, buscar en el breadcrumb
            var breadcrumbs = GetBreadcrumbPath();
            var firstBreadcrumb = breadcrumbs.FirstOrDefault();
            if (firstBreadcrumb != null && !string.IsNullOrEmpty(firstBreadcrumb.ClientId))
                return firstBreadcrumb.ClientId;
        }
        
        return string.Empty;
    }

    private string GetUploadButtonTitle()
    {
        if (!isAdmin)
            return "Solo los administradores pueden subir archivos";
        
        if (IsInRootDirectory)
            return "No se pueden subir archivos en la raíz. Selecciona una carpeta primero";
        
        return "Subir archivos";
    }

    // Clases auxiliares
    public class FileSystemItem
    {
        public int? Id { get; set; }
        public string Name { get; set; } = "";
        public string Path { get; set; } = "";
        public bool IsDirectory { get; set; }
        public long Size { get; set; }
        public string Extension { get; set; } = "";
        public DateTime ModifiedDate { get; set; }
        public string? Title { get; set; }
        public DateTime? ExpirationDate { get; set; }
        public string? ClientId { get; set; }
        public string? ClientName { get; set; }
    }

    public class DirectoryItem
    {
        public string Name { get; set; } = "";
        public string Path { get; set; } = "";
        public bool IsExpanded { get; set; }
        public List<DirectoryItem> Children { get; set; } = new();
    }

    public class BreadcrumbItem
    {
        public string Name { get; set; } = "";
        public string Path { get; set; } = "";
        public string? ClientName { get; set; }
        public string? ClientId { get; set; }
    }

    public class FileUploadConfig
    {
        public string FileName { get; set; } = "";
        public long FileSize { get; set; }
        public string Title { get; set; } = "";
        public DateTime? ExpirationDate { get; set; }
        public IBrowserFile File { get; set; } = null!;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
                isAdmin = authState.User.IsInRole("Admin");
                isClient = authState.User.IsInRole("Client");
                
                await LoadAvailableClients();
                await LoadCurrentDirectory();
                await LoadDirectoryStructure();
                
                // Si es cliente, seleccionar automáticamente su primera carpeta
                if (isClient && !isAdmin)
                {
                    await SelectFirstClientFolder();
                }
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al inicializar: {ex.Message}";
            await UpdateSelectedClientId();
        }
    }

    private async Task SelectFirstClientFolder()
    {
        try
        {
            if (string.IsNullOrEmpty(userId)) return;

            // Obtener todas las carpetas asignadas al cliente
            var allFiles = await fileManagerService.GetUserFilesAsync(userId);
            var clientFolders = allFiles.Where(f => 
                f.Type == FileItemType.Folder && 
                f.ClientId == userId && 
                string.IsNullOrEmpty(GetParentPath(f.Path)) // Solo carpetas raíz
            ).OrderBy(f => f.Name).ToList();

            if (clientFolders.Any())
            {
                // Seleccionar la primera carpeta asignada
                var firstFolder = clientFolders.First();
                await NavigateToFolder(firstFolder.Path);
                statusMessage = $"Navegando automáticamente a tu carpeta: {firstFolder.Name}";
            }
            else
            {
                statusMessage = "No tienes carpetas asignadas. Contacta al administrador.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al seleccionar carpeta del cliente: {ex.Message}";
        }
    }

    private async Task LoadAvailableClients()
    {
        try
        {
            availableClients = await fileManagerService.GetClientsAsync();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al cargar clientes: {ex.Message}";
        }
    }

    private async Task LoadCurrentDirectory()
    {
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            var files = await fileManagerService.GetUserFilesAsync(userId, currentPath);
            var allItems = files.Select(f => new FileSystemItem
            {
                Id = f.Id, Name = f.Name,Path = f.Path,
                IsDirectory = f.Type == FileItemType.Folder, Size = f.Size,
                Extension = Path.GetExtension(f.Name) ?? "", Title = f.Title, ExpirationDate = f.ExpirationDate,
                ModifiedDate = f.ModifiedAt, ClientId = f.ClientId, ClientName = GetClientNameById(f.ClientId) 
            }).ToList();

            // Filtrar contenido según el rol del usuario
            if (isAdmin)
            {
                // Los administradores ven todo el contenido
                currentItems = allItems;
            }
            else
            {
                // Los clientes solo ven carpetas/archivos asignados a ellos
                var user = await UserManager.FindByIdAsync(userId);
                if (user != null)
                {
                    var userClientId = user.Id; // Use the user's ID as the client identifier
                    if (!string.IsNullOrEmpty(userClientId))
                    {
                        currentItems = allItems.Where(item => 
                            item.ClientId == userClientId || 
                            string.IsNullOrEmpty(item.ClientId) // Allow items without assigned client in navigation
                        ).ToList();
                    }
                    else
                    {
                        // Si el usuario Cliente no tiene ClientId asignado, no ve nada
                        currentItems = new List<FileSystemItem>();
                        statusMessage = "No tienes carpetas asignadas. Contacta al administrador.";
                    }
                }
                else
                {
                    currentItems = new List<FileSystemItem>();
                }
            }

            selectedItems.Clear();
            await UpdateSelectedClientId();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al cargar directorio: {ex.Message}";
        }
    }

    private async Task LoadDirectoryStructure()
    {
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            var allFiles = await fileManagerService.GetUserFilesAsync(userId);
            var directories = allFiles.Where(f => f.Type == FileItemType.Folder).ToList();

            directoryStructure = BuildDirectoryTree(directories);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al cargar estructura de directorios: {ex.Message}";
        }
    }

    private List<DirectoryItem> BuildDirectoryTree(List<FileItem> directories)
    {
        var tree = new List<DirectoryItem>();
        var lookup = new Dictionary<string, DirectoryItem>();

        foreach (var dir in directories.OrderBy(d => d.Path))
        {
            var item = new DirectoryItem
            {
                Name = GetFolderName(dir.Path),
                Path = dir.Path
            };

            lookup[dir.Path] = item;

            var parentPath = GetParentPath(dir.Path);
            if (string.IsNullOrEmpty(parentPath))
            {
                tree.Add(item);
            }
            else if (lookup.ContainsKey(parentPath))
            {
                lookup[parentPath].Children.Add(item);
            }
        }

        return tree;
    }

    private string GetParentPath(string path)
    {
        if (string.IsNullOrEmpty(path)) return "";
        var lastSlash = path.LastIndexOf('/');
        return lastSlash > 0 ? path.Substring(0, lastSlash) : "";
    }

    private async Task HandleMultipleFilesSelected(InputFileChangeEventArgs e)
    {
        if (IsInRootDirectory)
        {
            statusMessage = "No se pueden subir archivos directamente en la raíz. Por favor, selecciona o crea una carpeta primero.";
            StateHasChanged();
            return;
        }

        await PrepareFilesForUpload(e.GetMultipleFiles());
    }

    private async Task PrepareFilesForUpload(IReadOnlyList<IBrowserFile> files)
    {
        if (files.Count == 0) return;

        pendingFiles.Clear();
        pendingFileConfigs.Clear();

        // Obtener el nombre de la carpeta actual para generar títulos automáticos
        var folderName = GetFolderName(currentPath);
        var fileCounter = 1;

        foreach (var file in files)
        {
            // Validaciones básicas
            if (file.Size > 50 * 1024 * 1024) // 50MB límite
            {
                Console.WriteLine($"Archivo {file.Name} excede el tamaño máximo permitido (50MB)");
                continue;
            }

            pendingFiles.Add(file);

            // Generar título automático: [nombre_carpeta]_[número_secuencial]
            var autoTitle = string.IsNullOrEmpty(folderName)
                ? $"Archivo_{fileCounter}"
                : $"{folderName}_{fileCounter}";

            pendingFileConfigs.Add(new FileUploadConfig
            {
                FileName = file.Name,
                FileSize = file.Size,
                Title = autoTitle, // Título automático basado en carpeta
                File = file
            });

            fileCounter++;
        }

        if (pendingFileConfigs.Any())
        {
            showFileUploadConfigModal = true;
            StateHasChanged();
        }
    }

    private async Task NavigateToFolder(string folderPath)
    {
        currentPath = folderPath;
        await LoadCurrentDirectory();
        await UpdateSelectedClientId();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private void ToggleSelectAll()
    {
        if (isAllSelected)
        {
            selectedItems.Clear();
        }
        else
        {
            selectedItems = new List<FileSystemItem>(currentItems);
        }
        StateHasChanged();
    }

    private void ShowCreateFolderModal()
    {
        newFolderName = "";
        
        // Si estamos en una subcarpeta, precargar el cliente de la carpeta principal
        if (!IsInRootDirectory)
        {
            selectedClientIdForNewFolder = GetCurrentFolderClientId();
        }
        else
        {
            selectedClientIdForNewFolder = "";
        }
        
        showCreateFolderModal = true;
    }

    private async Task CreateFolder()
    {
        // Validación de seguridad: Solo administradores pueden crear carpetas
        if (!isAdmin)
        {
            statusMessage = "Error: Solo los administradores pueden crear carpetas.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newFolderName) || string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(selectedClientIdForNewFolder))
            return;

        try
        {
            var folderPath = string.IsNullOrEmpty(currentPath)
                ? newFolderName
                : $"{currentPath}/{newFolderName}";

            await fileManagerService.CreateFolderAsync(newFolderName, currentPath, userId, selectedClientIdForNewFolder);

            showCreateFolderModal = false;
            await LoadCurrentDirectory();
            await LoadDirectoryStructure();

            var selectedClient = availableClients.FirstOrDefault(c => c.Id == selectedClientIdForNewFolder);
            var clientName = selectedClient != null ? $"{selectedClient.FirstName} {selectedClient.LastName}" : "Cliente";
            statusMessage = $"Carpeta '{newFolderName}' creada exitosamente y asignada a {clientName}.";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al crear carpeta: {ex.Message}";
        }
    }

    private async Task ShowDeleteConfirmModal()
    {
        // Validación de seguridad: Solo administradores pueden eliminar elementos
        if (!isAdmin)
        {
            statusMessage = "Error: Solo los administradores pueden eliminar elementos.";
            return;
        }

        if (!HasSelectedItems) return;

        // Copiar elementos seleccionados para mostrar en el modal
        itemsToDelete = new List<FileSystemItem>(selectedItems);
        folderContents.Clear();
        isLoadingFolderContents = false;

        // Si hay carpetas seleccionadas, cargar su contenido
        var foldersToAnalyze = itemsToDelete.Where(x => x.IsDirectory).ToList();
        if (foldersToAnalyze.Any())
        {
            isLoadingFolderContents = true;
            showDeleteConfirmModal = true;
            StateHasChanged();

            try
            {
                await LoadFolderContentsForDeletion(foldersToAnalyze);
            }
            catch (Exception ex)
            {
                statusMessage = $"Error al cargar contenido de carpetas: {ex.Message}";
            }
            finally
            {
                isLoadingFolderContents = false;
                StateHasChanged();
            }
        }
        else
        {
            showDeleteConfirmModal = true;
            StateHasChanged();
        }
    }

    private async Task LoadFolderContentsForDeletion(List<FileSystemItem> folders)
    {
        folderContents.Clear();

        foreach (var folder in folders)
        {
            try
            {
                // Cargar contenido recursivo de la carpeta
                var contents = await GetFolderContentsRecursive(folder.Path);
                folderContents.AddRange(contents);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar contenido de la carpeta {folder.Name}: {ex.Message}");
            }
        }
    }

    private async Task<List<FileSystemItem>> GetFolderContentsRecursive(string folderPath)
    {
        var contents = new List<FileSystemItem>();
        
        try
        {
            // Obtener contenido directo de la carpeta
            var directContents = await fileManagerService.GetDirectoryContentsAsync(folderPath, userId);
            
            foreach (var item in directContents)
            {
                var fileSystemItem = new FileSystemItem
                {
                    Id = item.Id,
                    Name = item.Name,
                    Path = item.Path,
                    IsDirectory = item.Type == FileItemType.Folder,
                    Size = item.Size,
                    Extension = item.Type == FileItemType.File ? Path.GetExtension(item.Name) : "",
                    ModifiedDate = item.ModifiedAt,
                    Title = item.Title,
                    ExpirationDate = item.ExpirationDate,
                    ClientId = item.ClientId,
                    ClientName = GetClientNameById(item.ClientId)
                };
                
                contents.Add(fileSystemItem);
                
                // Si es una carpeta, obtener su contenido recursivamente
                if (fileSystemItem.IsDirectory)
                {
                    var subContents = await GetFolderContentsRecursive(fileSystemItem.Path);
                    contents.AddRange(subContents);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener contenido de {folderPath}: {ex.Message}");
        }

        return contents;
    }

    // Métodos para estadísticas de cliente
    private int GetClientTotalFiles()
    {
        if (!isClient || isAdmin || string.IsNullOrEmpty(userId)) return 0;
        
        return currentItems.Count(item => !item.IsDirectory && item.ClientId == userId);
    }

    private int GetClientTotalFolders()
    {
        if (!isClient || isAdmin || string.IsNullOrEmpty(userId)) return 0;
        
        return currentItems.Count(item => item.IsDirectory && item.ClientId == userId);
    }

    private long GetClientTotalSize()
    {
        if (!isClient || isAdmin || string.IsNullOrEmpty(userId)) return 0;
        
        return currentItems.Where(item => !item.IsDirectory && item.ClientId == userId).Sum(item => item.Size);
    }

    private int GetClientExpiringFiles()
    {
        if (!isClient || isAdmin || string.IsNullOrEmpty(userId)) return 0;
        
        var thirtyDaysFromNow = DateTime.Now.AddDays(30);
        return currentItems.Count(item => 
            !item.IsDirectory && 
            item.ClientId == userId && 
            item.ExpirationDate.HasValue && 
            item.ExpirationDate.Value <= thirtyDaysFromNow);
    }

    private void CloseDeleteConfirmModal()
    {
        showDeleteConfirmModal = false;
        itemsToDelete.Clear();
        folderContents.Clear();
        isLoadingFolderContents = false;
        StateHasChanged();
    }

    private async Task ConfirmDeleteItems()
    {
        if (!isAdmin || !itemsToDelete.Any() || string.IsNullOrEmpty(userId))
        {
            CloseDeleteConfirmModal();
            return;
        }

        try
        {
            // Eliminar elementos del servicio (base de datos)
            foreach (var item in itemsToDelete)
            {
                if (item.Id.HasValue)
                {
                    await fileManagerService.DeleteFileItemAsync(item.Id.Value, userId);
                }
            }

            // Eliminar archivos físicos del servidor
            await DeletePhysicalFiles(itemsToDelete);

            await LoadCurrentDirectory();
            await LoadDirectoryStructure();
            statusMessage = $"Se eliminaron {itemsToDelete.Count} elemento(s) exitosamente del servidor.";
            selectedItems.Clear();
            CloseDeleteConfirmModal();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al eliminar elementos: {ex.Message}";
            CloseDeleteConfirmModal();
        }
    }

    private async Task DeletePhysicalFiles(List<FileSystemItem> items)
    {
        foreach (var item in items)
        {
            try
            {
                // Usar UserFiles en lugar de uploads para mantener consistencia
                var physicalPath = Path.Combine(WebHostEnvironment.WebRootPath, "UserFiles", item.Path.TrimStart('/'));
                
                if (item.IsDirectory)
                {
                    // Eliminar carpeta y todo su contenido
                    if (Directory.Exists(physicalPath))
                    {
                        Directory.Delete(physicalPath, recursive: true);
                        Console.WriteLine($"Carpeta eliminada físicamente: {physicalPath}");
                    }
                }
                else
                {
                    // Eliminar archivo individual
                    if (File.Exists(physicalPath))
                    {
                        File.Delete(physicalPath);
                        Console.WriteLine($"Archivo eliminado físicamente: {physicalPath}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al eliminar físicamente {item.Name}: {ex.Message}");
                // Continuar con los demás elementos aunque uno falle
            }
        }
    }

    private async Task DeleteSelectedItems()
    {
        // Este método se mantiene para compatibilidad, pero ahora redirige al modal de confirmación
        await ShowDeleteConfirmModal();
    }

    private void ShareSelectedItems()
    {
        if (!HasSelectedItems) return;

        generatedShareLink = "";
        showShareModal = true;
    }

    private async Task GenerateShareLink()
    {
        if (!HasSelectedItems || string.IsNullOrEmpty(userId)) return;

        try
        {
            var firstItem = selectedItems.First();
            // Funcionalidad de compartir simplificada - generar enlace básico
            generatedShareLink = $"https://example.com/shared/{userId}/{firstItem.Path}";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al generar enlace: {ex.Message}";
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        statusMessage = "Enlace copiado al portapapeles.";
    }

    private List<BreadcrumbItem> GetBreadcrumbPath()
    {
        if (string.IsNullOrEmpty(currentPath))
            return new List<BreadcrumbItem>();

        var parts = currentPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        var breadcrumbs = new List<BreadcrumbItem>();
        var currentBreadcrumbPath = "";

        foreach (var part in parts)
        {
            currentBreadcrumbPath = string.IsNullOrEmpty(currentBreadcrumbPath)
                ? part
                : $"{currentBreadcrumbPath}/{part}";

            // Buscar información del cliente para esta carpeta
            var folderItem = currentItems.FirstOrDefault(item =>
                item.IsDirectory && item.Path == currentBreadcrumbPath);

            breadcrumbs.Add(new BreadcrumbItem
            {
                Name = part,
                Path = currentBreadcrumbPath,
                ClientName = folderItem?.ClientName,
                ClientId = folderItem?.ClientId
            });
        }

        return breadcrumbs;
    }

    private string GetFolderName(string path)
    {
        if (string.IsNullOrEmpty(path)) return "";
        var lastSlash = path.LastIndexOf('/');
        return lastSlash >= 0 ? path.Substring(lastSlash + 1) : path;
    }

    private RenderFragment RenderDirectoryTree(List<DirectoryItem> items, int level = 0) => builder =>
    {
        var sequence = 0;

        foreach (var item in items)
        {
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", $"directory-item level-{level}");

            // Contenedor de indentación para líneas jerárquicas
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "directory-indent");
            builder.AddAttribute(sequence++, "style", $"padding-left: {level * 20}px;");

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", $"directory-node {(item.Path == currentPath ? "active" : "")}");
            builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => NavigateToFolder(item.Path)));

            // Botón de expansión/colapso
            if (item.Children.Any())
            {
                builder.OpenElement(sequence++, "button");
                builder.AddAttribute(sequence++, "class", "expand-toggle");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleDirectoryExpansion(item)));
                builder.AddAttribute(sequence++, "type", "button");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", item.IsExpanded ? "fe fe-chevron-down" : "fe fe-chevron-right");
                builder.CloseElement();
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(sequence++, "button");
                builder.AddAttribute(sequence++, "class", "expand-toggle no-children");
                builder.AddAttribute(sequence++, "type", "button");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-minus");
                builder.CloseElement();
                builder.CloseElement();
            }

            // Icono de carpeta
            builder.OpenElement(sequence++, "i");
            builder.AddAttribute(sequence++, "class", item.IsExpanded && item.Children.Any() ? "fe fe-folder-open" : "fe fe-folder");
            builder.CloseElement();

            // Nombre de la carpeta
            builder.OpenElement(sequence++, "span");
            builder.AddAttribute(sequence++, "class", "directory-name");
            builder.AddAttribute(sequence++, "title", item.Path);
            builder.AddContent(sequence++, item.Name);
            builder.CloseElement();

            // Badge de cliente - DirectoryItem no tiene ClientName
            // Esta funcionalidad se puede agregar más tarde si es necesario

            builder.CloseElement(); // directory-node
            builder.CloseElement(); // directory-indent

            // Renderizar hijos si están expandidos
            if (item.IsExpanded && item.Children.Any())
            {
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", $"directory-children {(item.IsExpanded ? "expanded" : "collapsed")}");
                builder.AddContent(sequence++, RenderDirectoryTree(item.Children, level + 1));
                builder.CloseElement();
            }

            builder.CloseElement(); // directory-item
        }
    };

    private void ToggleDirectoryExpansion(DirectoryItem item)
    {
        item.IsExpanded = !item.IsExpanded;
        StateHasChanged();
    }

    private RenderFragment RenderFileGridItems() => builder =>
    {
        var sequence = 0;

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-grid-minimal");

        foreach (var item in currentItems.Where(x=> !x.IsDirectory).ToList())
        {
            var isSelected = selectedItems.Contains(item);

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", $"file-item-minimal {(isSelected ? "selected" : "")}");

            // Para carpetas usar doble click, para archivos usar click simple
            if (item.IsDirectory)
            {
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));
                builder.AddAttribute(sequence++, "ondblclick", EventCallback.Factory.Create(this, () => NavigateToFolder(item.Path)));
            }
            else
            {
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));
            }

            // Checkbox de selección minimalista
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-checkbox-minimal");
            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "checkbox");
            builder.AddAttribute(sequence++, "class", "file-check-input");
            builder.AddAttribute(sequence++, "checked", isSelected);
            builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));
            builder.CloseElement();
            builder.CloseElement();

            // Contenedor de previsualización/icono
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-preview-container");

            if (IsImageFile(item))
            {
                // Previsualización de imagen
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", "file-image-preview");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowImagePreview(item)));
                builder.AddAttribute(sequence++, "title", "Click para vista previa completa");

                builder.OpenElement(sequence++, "img");
                builder.AddAttribute(sequence++, "src", GetImagePreviewUrl(item));
                builder.AddAttribute(sequence++, "alt", item.Name);
                builder.AddAttribute(sequence++, "class", "file-thumbnail");
                builder.AddAttribute(sequence++, "loading", "lazy");
                builder.CloseElement();

                // Overlay con icono de vista previa
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", "file-preview-overlay");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-eye");
                builder.CloseElement();
                builder.CloseElement();

                builder.CloseElement();
            }
            else
            {
                // Icono para archivos no-imagen
                builder.OpenElement(sequence++, "div");
                builder.AddAttribute(sequence++, "class", "file-icon-minimal");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", GetFileIcon(item));
                builder.CloseElement();
                builder.CloseElement();
            }

            builder.CloseElement(); // file-preview-container

            // Información del archivo
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-info-minimal");

            // Nombre del archivo
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-name-minimal");
            builder.AddAttribute(sequence++, "title", !string.IsNullOrEmpty(item.Title) ? $"{item.Title} ({item.Name})" : item.Name);
            builder.AddContent(sequence++, !string.IsNullOrEmpty(item.Title) ? item.Title : item.Name);
            builder.CloseElement();

            // Metadatos del archivo
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-meta-minimal");

            if (!item.IsDirectory)
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", "file-size-minimal");
                builder.AddContent(sequence++, FormatFileSize(item.Size));
                builder.CloseElement();
            }
            else if (!string.IsNullOrEmpty(item.ClientName))
            {
                // Mostrar cliente para carpetas
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", "file-client-minimal");
                builder.AddAttribute(sequence++, "title", $"Cliente asignado: {item.ClientName}");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-user");
                builder.CloseElement();
                builder.AddContent(sequence++, $" {item.ClientName}");
                builder.CloseElement();
            }

            if (item.ExpirationDate.HasValue)
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", $"file-expiry-minimal {(item.ExpirationDate.Value < DateTime.Now ? "expired" : "warning")}");
                builder.AddAttribute(sequence++, "title", $"Expira: {item.ExpirationDate.Value:dd/MM/yyyy HH:mm}");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-clock");
                builder.CloseElement();
                builder.AddContent(sequence++, $" {item.ExpirationDate.Value:dd/MM}");
                builder.CloseElement();
            }

            builder.CloseElement(); // file-meta-minimal
            builder.CloseElement(); // file-info-minimal

            // Botón de edición (solo visible en hover)
            if (!item.IsDirectory && isAdmin)
            {
                builder.OpenElement(sequence++, "button");
                builder.AddAttribute(sequence++, "class", "file-edit-btn-minimal");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowEditFileModal(item)));
                builder.AddAttribute(sequence++, "title", "Editar propiedades");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-edit-2");
                builder.CloseElement();
                builder.CloseElement();
            }

            builder.CloseElement(); // file-item-minimal
        }

        builder.CloseElement(); // file-grid-minimal
    };

    private RenderFragment RenderFileListItems() => builder =>
    {
        var sequence = 0;

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list");

        // Header
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-header");

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell checkbox-cell");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell name-cell");
        builder.AddContent(sequence++, "Nombre");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell size-cell");
        builder.AddContent(sequence++, "Tamaño");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell type-cell");
        builder.AddContent(sequence++, "Tipo");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell date-cell");
        builder.AddContent(sequence++, "Fecha modificación");
        builder.CloseElement();

        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "file-list-cell client-cell");
        builder.AddContent(sequence++, "Cliente");
        builder.CloseElement();

        builder.CloseElement(); // file-list-header

        // Items
        foreach (var item in currentItems)
        {
            var isSelected = selectedItems.Contains(item);

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", $"file-list-row {(isSelected ? "selected" : "")}");

            // Para carpetas usar doble click, para archivos usar click simple
            if (item.IsDirectory)
            {
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));
                builder.AddAttribute(sequence++, "ondblclick", EventCallback.Factory.Create(this, () => NavigateToFolder(item.Path)));
            }
            else
            {
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ToggleFileSelection(item)));
            }

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell checkbox-cell");

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "d-flex align-items-center gap-2");

            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "checkbox");
            builder.AddAttribute(sequence++, "class", "form-check-input");
            builder.AddAttribute(sequence++, "checked", isSelected);
            builder.CloseElement();

            if (!item.IsDirectory)
            {
                builder.OpenElement(sequence++, "button");
                builder.AddAttribute(sequence++, "class", "btn btn-sm btn-outline-primary");
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowEditFileModal(item)));
                builder.AddAttribute(sequence++, "title", "Editar propiedades");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-edit");
                builder.CloseElement();
                builder.CloseElement();
            }

            builder.CloseElement();
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell name-cell");
            builder.OpenElement(sequence++, "i");
            builder.AddAttribute(sequence++, "class", GetFileIcon(item));
            if (IsImageFile(item))
            {
                builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ShowImagePreview(item)));
                builder.AddAttribute(sequence++, "style", "cursor: pointer;");
                builder.AddAttribute(sequence++, "title", "Click para vista previa");
            }
            builder.CloseElement();
            builder.AddContent(sequence++, " " + item.Name);
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell size-cell");
            builder.AddContent(sequence++, item.IsDirectory ? "-" : FormatFileSize(item.Size));
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell type-cell");
            builder.AddContent(sequence++, item.IsDirectory ? "Carpeta" : item.Extension.ToUpper());
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell date-cell");
            builder.AddContent(sequence++, item.ModifiedDate.ToString("dd/MM/yyyy HH:mm"));
            builder.CloseElement();

            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "file-list-cell client-cell");
            if (item.IsDirectory && !string.IsNullOrEmpty(item.ClientName))
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", "badge bg-primary");
                builder.AddAttribute(sequence++, "title", $"Cliente asignado: {item.ClientName}");
                builder.OpenElement(sequence++, "i");
                builder.AddAttribute(sequence++, "class", "fe fe-user me-1");
                builder.CloseElement();
                builder.AddContent(sequence++, item.ClientName);
                builder.CloseElement();
            }
            else if (!item.IsDirectory)
            {
                builder.AddContent(sequence++, "-");
            }
            else
            {
                builder.OpenElement(sequence++, "span");
                builder.AddAttribute(sequence++, "class", "text-muted");
                builder.AddContent(sequence++, "Sin asignar");
                builder.CloseElement();
            }
            builder.CloseElement();

            builder.CloseElement(); // file-list-row
        }

        builder.CloseElement(); // file-list
    };

    private string GetFileIcon(FileSystemItem item)
    {
        if (item.IsDirectory)
            return "fe fe-folder";

        return item.Extension.ToLower() switch
        {
            ".pdf" => "fe fe-file-text",
            ".doc" or ".docx" => "fe fe-file-text",
            ".xls" or ".xlsx" => "fe fe-file-text",
            ".ppt" or ".pptx" => "fe fe-file-text",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => "fe fe-image",
            ".mp4" or ".avi" or ".mov" or ".wmv" => "fe fe-video",
            ".mp3" or ".wav" or ".flac" => "fe fe-music",
            ".zip" or ".rar" or ".7z" => "fe fe-archive",
            _ => "fe fe-file"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    // Métodos para vista previa de imágenes
    private bool IsImageFile(FileSystemItem item)
    {
        if (item.IsDirectory) return false;

        var extension = Path.GetExtension(item.Name).ToLowerInvariant();
        return extension == ".jpg" || extension == ".jpeg" || extension == ".png" ||
               extension == ".gif" || extension == ".bmp" || extension == ".webp" ||
               extension == ".svg" || extension == ".ico";
    }

    private void ShowImagePreview(FileSystemItem item)
    {
        if (IsImageFile(item))
        {
            selectedImageForPreview = item;
            showImagePreviewModal = true;
            StateHasChanged();
        }
    }

    private void CloseImagePreview()
    {
        showImagePreviewModal = false;
        selectedImageForPreview = null;
        isImageZoomed = false;
        StateHasChanged();
    }

    private void ToggleImageZoom()
    {
        isImageZoomed = !isImageZoomed;
        StateHasChanged();
    }

    private List<FileSystemItem> GetImageFiles()
    {
        var imageExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
        return currentItems.Where(item => 
            !item.IsDirectory && 
            imageExtensions.Contains(item.Extension.ToLower())
        ).ToList();
    }

    private int GetCurrentImageIndex()
    {
        if (selectedImageForPreview == null) return -1;
        var imageFiles = GetImageFiles();
        return imageFiles.FindIndex(img => img.Name == selectedImageForPreview.Name);
    }

    private bool CanNavigateImage(int direction)
    {
        var imageFiles = GetImageFiles();
        var currentIndex = GetCurrentImageIndex();
        var newIndex = currentIndex + direction;
        return newIndex >= 0 && newIndex < imageFiles.Count;
    }

    private void NavigateImage(int direction)
    {
        if (!CanNavigateImage(direction)) return;

        var imageFiles = GetImageFiles();
        var currentIndex = GetCurrentImageIndex();
        var newIndex = currentIndex + direction;

        if (newIndex >= 0 && newIndex < imageFiles.Count)
        {
            selectedImageForPreview = imageFiles[newIndex];
            isImageZoomed = false; // Reset zoom when navigating
            StateHasChanged();
        }
    }

    private string GetImagePreviewUrl(FileSystemItem item)
    {
        try
        {
            // Use the item's Path directly since it already contains the full relative path
            var relativePath = item.Path.Replace("\\", "/");
            var fullPath = Path.Combine(WebHostEnvironment.WebRootPath, "UserFiles", relativePath);

            if (!File.Exists(fullPath))
            {
                // Return a default image if file not found
                return "/images/no-preview.png";
            }

            // Return the preview URL if file exists
            return $"/api/files/preview?path={Uri.EscapeDataString(relativePath)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting image preview URL: {ex.Message}");
            return "/images/error.png";
        }
    }

    private async Task DownloadFile(FileSystemItem item)
    {
        try
        {
            // Use the item's Path directly since it already contains the full relative path
            var relativePath = item.Path;
            var downloadUrl = $"/download/{Uri.EscapeDataString(relativePath)}";

            // Usar JavaScript para iniciar la descarga
            await JSRuntime.InvokeVoidAsync("window.open", downloadUrl, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al descargar archivo: {ex.Message}");
            // Aquí podrías mostrar un mensaje de error al usuario
        }
    }

    // Métodos para configuración de archivos antes de subir
    private void CancelFileUpload()
    {
        showFileUploadConfigModal = false;
        pendingFiles.Clear();
        pendingFileConfigs.Clear();
        massExpirationDate = null;
        massTitlePrefix = string.Empty;
        StateHasChanged();
    }

    private async Task ConfirmFileUpload()
    {
        if (!AreAllFileConfigsValid()) return;

        try
        {
            foreach (var config in pendingFileConfigs)
            {
                await UploadFileWithConfig(config);
            }

            showFileUploadConfigModal = false;
            pendingFiles.Clear();
            pendingFileConfigs.Clear();
            massExpirationDate = null;
            massTitlePrefix = string.Empty;

            // Recargar el directorio actual
            await LoadCurrentDirectory();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al subir archivos: {ex.Message}");
        }
    }

    private bool AreAllFileConfigsValid()
    {
        return pendingFileConfigs.All(config => !string.IsNullOrWhiteSpace(config.Title));
    }

    private void ApplyMassExpirationDate()
    {
        if (massExpirationDate.HasValue)
        {
            foreach (var config in pendingFileConfigs)
            {
                config.ExpirationDate = massExpirationDate.Value;
            }
            StateHasChanged();
        }
    }

    private void ApplyMassConfiguration()
    {
        // Aplicar prefijo de título si está definido
        if (!string.IsNullOrEmpty(massTitlePrefix))
        {
            foreach (var config in pendingFileConfigs)
            {
                if (string.IsNullOrWhiteSpace(config.Title))
                {
                    config.Title = massTitlePrefix + Path.GetFileNameWithoutExtension(config.FileName);
                }
                else if (!config.Title.StartsWith(massTitlePrefix))
                {
                    config.Title = massTitlePrefix + config.Title;
                }
            }
        }

        // Aplicar fecha de expiración si está definida
        if (massExpirationDate.HasValue)
        {
            foreach (var config in pendingFileConfigs)
            {
                config.ExpirationDate = massExpirationDate.Value;
            }
        }

        StateHasChanged();
    }

    private void ClearMassConfiguration()
    {
        massTitlePrefix = string.Empty;
        massExpirationDate = null;
        StateHasChanged();
    }

    private async Task UploadFileWithConfig(FileUploadConfig config)
    {
        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            // Validate file size (10MB max)
            const long maxFileSize = 10 * 1024 * 1024;
            if (config.FileSize > maxFileSize)
            {
                throw new Exception($"File {config.FileName} is too large. Maximum size: 10MB");
            }

            // Open stream and upload file with metadata
            using var stream = config.File.OpenReadStream(maxAllowedSize: maxFileSize);
            var result = await fileManagerService.SaveFileWithContentAsync(
                config.FileName, currentPath, stream, config.File.ContentType,userId,
                WebHostEnvironment.WebRootPath, selectedClientId, config.Title, config.ExpirationDate
            );

            if (result == null)
            {
                throw new Exception($"Failed to upload file {config.FileName}");
            }

            // Update UI status
            statusMessage = $"File {config.FileName} uploaded successfully";
            await LoadCurrentDirectory();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error uploading file {config.FileName}: {ex.Message}";
            Console.WriteLine($"Upload error for {config.FileName}: {ex}");
            throw;
        }
        finally
        {
            StateHasChanged();
        }
    }

    // Métodos para editar propiedades de archivos individuales
    private void ShowEditFileModal(FileSystemItem file)
    {
        selectedFileForEdit = file;
        editFileTitle = file.Title ?? file.Name; // Usar título existente o nombre del archivo
        editFileExpirationDate = file.ExpirationDate;
        showEditFileModal = true;
        StateHasChanged();
    }

    private void CloseEditFileModal()
    {
        showEditFileModal = false;
        selectedFileForEdit = null;
        editFileTitle = "";
        editFileExpirationDate = null;
        StateHasChanged();
    }

    private void ClearExpirationDate()
    {
        editFileExpirationDate = null;
        StateHasChanged();
    }

    private async Task SaveFileProperties()
    {
        if (selectedFileForEdit == null || string.IsNullOrWhiteSpace(editFileTitle))
            return;

        try
        {
            // Aquí iría la lógica para actualizar las propiedades del archivo en el servidor
            // Por ahora, actualizamos localmente
            selectedFileForEdit.Title = editFileTitle.Trim();
            selectedFileForEdit.ExpirationDate = editFileExpirationDate;

            // Simular llamada al servidor
            await Task.Delay(300);

            CloseEditFileModal();

            // Mostrar mensaje de éxito (opcional)
            // Aquí podrías agregar un toast o notificación

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Manejar error
            Console.WriteLine($"Error updating file properties: {ex.Message}");
        }
    }

    // Métodos para edición masiva de fechas de expiración
    private void ShowMassEditModal()
    {
        // Validación de seguridad: Solo administradores pueden editar archivos
        if (!isAdmin)
        {
            statusMessage = "Error: Solo los administradores pueden editar archivos.";
            return;
        }

        if (!HasSelectedFiles) return;

        massEditExpirationDate = null;
        removeExistingDates = false;
        showMassEditModal = true;
        StateHasChanged();
    }

    private void CloseMassEditModal()
    {
        showMassEditModal = false;
        massEditExpirationDate = null;
        removeExistingDates = false;
        StateHasChanged();
    }

    private async Task ApplyMassExpirationEdit()
    {
        // Validación de seguridad: Solo administradores pueden editar archivos
        if (!isAdmin)
        {
            statusMessage = "Error: Solo los administradores pueden editar archivos.";
            return;
        }

        if (!HasSelectedFiles) return;

        try
        {
            foreach (var file in selectedItems.Where(f => !f.IsDirectory))
            {
                if (removeExistingDates)
                {
                    file.ExpirationDate = null;
                }
                else if (massEditExpirationDate.HasValue)
                {
                    file.ExpirationDate = massEditExpirationDate.Value;
                }
            }

            // Simular llamada al servidor
            await Task.Delay(500);

            CloseMassEditModal();

            var affectedCount = selectedItems.Count(f => !f.IsDirectory);
            statusMessage = removeExistingDates
                ? $"Se quitaron las fechas de expiración de {affectedCount} archivo(s)."
                : $"Se aplicó la fecha de expiración a {affectedCount} archivo(s).";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al actualizar fechas de expiración: {ex.Message}";
        }
    }

    private string GetTimeUntilExpiration(DateTime expirationDate)
    {
        var timeSpan = expirationDate - DateTime.Now;

        if (timeSpan.TotalDays >= 1)
            return $"{(int)timeSpan.TotalDays} día(s)";
        else if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours} hora(s)";
        else if (timeSpan.TotalMinutes >= 1)
            return $"{(int)timeSpan.TotalMinutes} minuto(s)";
        else
            return "menos de un minuto";
    }

    private bool HasSelectedFiles => selectedItems.Any(f => !f.IsDirectory);

    private void ToggleFileSelection(FileSystemItem item)
    {
        if (selectedItems.Contains(item))
        {
            selectedItems.Remove(item);
        }
        else
        {
            selectedItems.Add(item);
        }
        StateHasChanged();
    }

    private async Task NavigateUp()
    {
        if (string.IsNullOrEmpty(currentPath)) return;

        var lastSlash = currentPath.LastIndexOf('/');
        currentPath = lastSlash > 0 ? currentPath.Substring(0, lastSlash) : "";
        await LoadCurrentDirectory();
    }

    private void OnDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "copy";
    }

    private void OnDragEnter(DragEventArgs e)
    {
        isDragOver = true;
        StateHasChanged();
    }

    private void OnDragLeave(DragEventArgs e)
    {
        isDragOver = false;
        StateHasChanged();
    }

    private void OnDrop(DragEventArgs e)
    {
        isDragOver = false;

        // En Blazor, el drag and drop directo de archivos es limitado
        // Por ahora, simplemente mostramos el modal de subida de archivos
        // Los usuarios pueden usar el botón "Subir" para seleccionar archivos
        showFileUploadConfigModal = true;

        StateHasChanged();
    }

    private async Task UploadSingleFile(IBrowserFile file)
    {
        // Validación de seguridad: Solo administradores pueden subir archivos
        if (!isAdmin)
        {
            statusMessage = "Error: Solo los administradores pueden subir archivos.";
            return;
        }

        if (string.IsNullOrEmpty(userId)) return;

        try
        {
            // Validar tamaño del archivo (10MB máximo)
            const long maxFileSize = 10 * 1024 * 1024;
            if (file.Size > maxFileSize)
            {
                statusMessage = $"El archivo {file.Name} es demasiado grande. Tamaño máximo: 10MB";
                StateHasChanged();
                return;
            }

            // Validar tipo de archivo (opcional - puedes agregar restricciones)
            var allowedExtensions = new[] { ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".mp4", ".avi", ".mov", ".mp3", ".wav", ".txt", ".zip", ".rar" };
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            if (!allowedExtensions.Contains(fileExtension))
            {
                statusMessage = $"Tipo de archivo no permitido: {fileExtension}";
                StateHasChanged();
                return;
            }

            using var stream = file.OpenReadStream(maxAllowedSize: maxFileSize);
            var result = await fileManagerService.SaveFileWithContentAsync(
                file.Name,
                currentPath,
                stream,
                file.ContentType,
                userId,
                WebHostEnvironment.WebRootPath,
                selectedClientId
            );

            if (result != null)
            {
                statusMessage = $"Archivo {result.Name} subido correctamente";
                await LoadCurrentDirectory(); // Recargar la vista
            }
            else
            {
                statusMessage = $"Error al subir el archivo {file.Name}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al subir el archivo {file.Name}: {ex.Message}";
        }

        StateHasChanged();
    }

    private string GetClientNameById(string? clientId)
    {
        if (string.IsNullOrEmpty(clientId))
            return "Sin asignar";

        var client = availableClients?.FirstOrDefault(c => c.Id == clientId);
        return client != null ? $"{client.FirstName} {client.LastName}" : "Cliente no encontrado";
    }

    private async Task UpdateSelectedClientId()
    {
        if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(currentPath))
        {
            selectedClientId = null;
            return;
        }

        try
        {
            // Obtener la carpeta raíz del path actual
            var rootFolderPath = currentPath.Split('/')[0];

            // Buscar la carpeta raíz en los archivos del usuario
            var allFiles = await fileManagerService.GetUserFilesAsync(userId);
            var rootFolder = allFiles.FirstOrDefault(f => f.Type == FileItemType.Folder && f.Path == rootFolderPath);

            selectedClientId = rootFolder?.ClientId;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating selected client ID: {ex.Message}");
            selectedClientId = null;
        }
    }

    // Métodos para funcionalidad de PDF
    private string GetPrintButtonTitle()
    {
        if (isGeneratingPDF)
            return "Generando PDF...";
        
        if (!HasImageFiles())
            return "No hay imágenes para imprimir";
        
        var imageCount = GetImageFiles().Count;
        return $"Generar PDF con {imageCount} imagen{(imageCount != 1 ? "es" : "")}";
    }

    private bool HasImageFiles()
    {
        return GetImageFiles().Any();
    }



    private async Task GeneratePDF()
    {
        if (isGeneratingPDF || !HasImageFiles())
            return;

        try
        {
            isGeneratingPDF = true;
            StateHasChanged();

            var imageFiles = GetImageFiles();
            var folderName = GetCurrentFolderDisplayName();
            
            // Llamar a JavaScript para generar el PDF
            await JSRuntime.InvokeVoidAsync("generateImagesPDF", imageFiles.Select(img => new {
                name = img.Title,
                url = GetImagePreviewUrl(img)
            }).ToArray(), folderName);
        }
        catch (Exception ex)
        {
            statusMessage = $"Error al generar PDF: {ex.Message}";
            StateHasChanged();
        }
        finally
        {
            isGeneratingPDF = false;
            StateHasChanged();
        }
    }
}
