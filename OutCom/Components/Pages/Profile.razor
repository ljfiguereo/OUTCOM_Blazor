@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using OutCom.Data
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Mi Perfil</PageTitle>

<div class="container-fluid">
    <div class="row">
        <!-- CONTAINER -->
        <div class="col-12">
            <!-- PAGE-HEADER -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-1">Mi Perfil</h2>
                    <p class="text-muted mb-0">Gestiona los detalles de tu perfil y preferencias.</p>
                </div>
                <div>
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Mi Perfil</li>
                    </ol>
                </div>
            </div>
            <!-- PAGE-HEADER END -->

            <!-- ROW -->
            <div class="row">
                <div class="col-lg-8 col-xl-9">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Información Personal</h3>
                        </div>
                        <div class="card-body">
                            @if (isLoading)
                            {
                                <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Cargando...</span>
                                    </div>
                                </div>
                            }
                            else if (currentUser != null)
                            {
                                <EditForm Model="@profileModel" OnValidSubmit="@SaveProfile">
                                    <AntiforgeryToken />
                                    <DataAnnotationsValidator />
                                    
                                    <!-- Información de Solo Lectura -->
                                    <div class="row mb-4">
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">Usuario</label>
                                            <div class="form-control-plaintext bg-light p-3">
                                                <i class="fe fe-user me-2 text-primary"></i>
                                                @currentUser.UserName
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label text-muted">Tipo de Usuario</label>
                                            <div class="form-control-plaintext bg-light p-3">
                                                @if (isAdmin)
                                                {
                                                    <i class="fe fe-shield me-2 text-success"></i><span class="badge bg-success">Administrador</span>
                                                }
                                                else
                                                {
                                                    <i class="fe fe-user me-2 text-info"></i><span class="badge bg-info">Cliente</span>
                                                }
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Campos Editables -->
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group mb-3">
                                                <label for="firstName" class="form-label">Nombre <span class="text-danger">*</span></label>
                                                <InputText @bind-Value="profileModel.FirstName" class="form-control" id="firstName" placeholder="Ingrese su nombre" />
                                                <ValidationMessage For="() => profileModel.FirstName" class="text-danger" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group mb-3">
                                                <label for="lastName" class="form-label">Apellido <span class="text-danger">*</span></label>
                                                <InputText @bind-Value="profileModel.LastName" class="form-control" id="lastName" placeholder="Ingrese su apellido" />
                                                <ValidationMessage For="() => profileModel.LastName" class="text-danger" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group mb-3">
                                                <label for="email" class="form-label">Correo Electrónico <span class="text-danger">*</span></label>
                                                <InputText @bind-Value="profileModel.Email" class="form-control" id="email" placeholder="correo@ejemplo.com" />
                                                <ValidationMessage For="() => profileModel.Email" class="text-danger" />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group mb-3">
                                                <label for="phoneNumber" class="form-label">Número de Teléfono <span class="text-danger">*</span></label>
                                                <InputText @bind-Value="profileModel.PhoneNumber" class="form-control" id="phoneNumber" placeholder="+1234567890" />
                                                <ValidationMessage For="() => profileModel.PhoneNumber" class="text-danger" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group mb-4">
                                        <label for="address" class="form-label">Dirección Física <span class="text-danger">*</span></label>
                                        <InputTextArea @bind-Value="profileModel.Address" class="form-control" id="address" rows="3" placeholder="Ingrese su dirección completa" />
                                        <ValidationMessage For="() => profileModel.Address" class="text-danger" />
                                    </div>

                                    <!-- Botones de Acción -->
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <small class="text-muted">
                                                <i class="fe fe-info me-1"></i>
                                                Los campos marcados con <span class="text-danger">*</span> son obligatorios
                                            </small>
                                        </div>
                                        <div>
                                            <button type="button" class="btn btn-secondary me-2" @onclick="ResetForm">
                                                <i class="fe fe-refresh-cw me-1"></i>
                                                Restablecer
                                            </button>
                                            <button type="button" class="btn btn-primary" disabled="@isSaving"
                                                    @onclick="SaveProfile">
                                                @if (isSaving)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                    <text>Guardando...</text>
                                                }
                                                else
                                                {
                                                    <i class="fe fe-save me-1"></i>
                                                    <text>Guardar Cambios</text>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                </EditForm>
                            }
                        </div>
                    </div>
                </div>

                <!-- Panel Lateral de Información -->
                <div class="col-lg-4 col-xl-3">
                    <div class="card">
                        <div class="card-header">
                            <h4 class="card-title">Información de Cuenta</h4>
                        </div>
                        <div class="card-body">
                            @if (currentUser != null)
                            {
                                <div class="text-center mb-4">
                                    <div class="avatar avatar-xxl brround mx-auto" style="background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; font-size: 24px;">
                                        @GetUserInitials()
                                    </div>
                                    <h5 class="mt-3 mb-1">@currentUser.FullName</h5>
                                    <p class="text-muted">@currentUser.Email</p>
                                </div>

                                <div class="list-group list-group-flush">
                                    <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                        <div>
                                            <i class="fe fe-calendar text-muted me-2"></i>
                                            <span class="text-muted">Miembro desde</span>
                                        </div>
                                        <span class="fw-medium">@currentUser.CreatedAt.ToString("MMM yyyy")</span>
                                    </div>
                                    <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                        <div>
                                            <i class="fe fe-clock text-muted me-2"></i>
                                            <span class="text-muted">Último acceso</span>
                                        </div>
                                        <span class="fw-medium">@(currentUser.LastLoginAt?.ToString("dd/MM/yyyy") ?? "Nunca")</span>
                                    </div>
                                    <div class="list-group-item d-flex justify-content-between align-items-center border-0 px-0">
                                        <div>
                                            <i class="fe fe-activity text-muted me-2"></i>
                                            <span class="text-muted">Estado</span>
                                        </div>
                                        <span class="badge bg-success">Activo</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <!-- ROW END -->
        </div>
        <!-- CONTAINER END -->
    </div>
</div>

@code {
    private ApplicationUser? currentUser;
    private ProfileModel profileModel = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            isLoading = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                currentUser = await UserManager.GetUserAsync(user);
                isAdmin = await UserManager.IsInRoleAsync(currentUser, "Admin");

                if (currentUser != null)
                {
                    profileModel = new ProfileModel
                    {
                        FirstName = currentUser.FirstName,
                        LastName = currentUser.LastName,
                        Email = currentUser.Email ?? string.Empty,
                        PhoneNumber = currentUser.PhoneNumber ?? string.Empty,
                        Address = currentUser.Address
                    };
                }
            }
        }
        catch (Exception ex)
        {
            await ShowToast("Error al cargar el perfil: " + ex.Message, "error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveProfile()
    {
        if (currentUser == null) return;

        try
        {
            isSaving = true;

            // Actualizar los datos del usuario
            currentUser.FirstName = profileModel.FirstName;
            currentUser.LastName = profileModel.LastName;
            currentUser.PhoneNumber = profileModel.PhoneNumber;
            currentUser.Address = profileModel.Address;

            // Actualizar email si cambió
            if (currentUser.Email != profileModel.Email)
            {
                var setEmailResult = await UserManager.SetEmailAsync(currentUser, profileModel.Email);
                if (!setEmailResult.Succeeded)
                {
                    await ShowToast("Error al actualizar el correo electrónico", "error");
                    return;
                }

                var setUserNameResult = await UserManager.SetUserNameAsync(currentUser, profileModel.Email);
                if (!setUserNameResult.Succeeded)
                {
                    await ShowToast("Error al actualizar el nombre de usuario", "error");
                    return;
                }
            }

            // Guardar otros cambios
            var updateResult = await UserManager.UpdateAsync(currentUser);
            if (updateResult.Succeeded)
            {
                await ShowToast("Perfil actualizado exitosamente", "success");
            }
            else
            {
                var errors = string.Join(", ", updateResult.Errors.Select(e => e.Description));
                await ShowToast("Error al actualizar el perfil: " + errors, "error");
            }
        }
        catch (Exception ex)
        {
            await ShowToast("Error inesperado: " + ex.Message, "error");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ResetForm()
    {
        await LoadUserProfile();
        await ShowToast("Formulario restablecido", "info");
    }

    private string GetUserInitials()
    {
        if (currentUser == null) return "U";
        
        var firstInitial = !string.IsNullOrEmpty(currentUser.FirstName) ? currentUser.FirstName[0].ToString().ToUpper() : "";
        var lastInitial = !string.IsNullOrEmpty(currentUser.LastName) ? currentUser.LastName[0].ToString().ToUpper() : "";
        
        return firstInitial + lastInitial;
    }

    private async Task ShowToast(string message, string type)
    {
        var toastClass = type switch
        {
            "success" => "bg-success",
            "error" => "bg-danger",
            "warning" => "bg-warning",
            "info" => "bg-info",
            _ => "bg-primary"
        };

        await JSRuntime.InvokeVoidAsync("eval", $@"
            const toast = document.createElement('div');
            toast.className = 'toast align-items-center text-white {toastClass} border-0 position-fixed';
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class='d-flex'>
                    <div class='toast-body'>{message}</div>
                    <button type='button' class='btn-close btn-close-white me-2 m-auto' data-bs-dismiss='toast'></button>
                </div>
            `;
            document.body.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        ");
    }

    public class ProfileModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        [StringLength(50, ErrorMessage = "El nombre no puede exceder 50 caracteres")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es obligatorio")]
        [StringLength(50, ErrorMessage = "El apellido no puede exceder 50 caracteres")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "El correo electrónico es obligatorio")]
        [EmailAddress(ErrorMessage = "Formato de correo electrónico inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "El número de teléfono es obligatorio")]
        [Phone(ErrorMessage = "Formato de teléfono inválido")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "La dirección es obligatoria")]
        [StringLength(200, ErrorMessage = "La dirección no puede exceder 200 caracteres")]
        public string Address { get; set; } = string.Empty;
    }
}