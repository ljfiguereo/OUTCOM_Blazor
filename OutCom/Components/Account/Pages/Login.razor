@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using OutCom.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Iniciar Sesión - OutCom</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    
    <div class="form-group">
        <label class="form-label">Correo Electrónico</label>
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="tu@email.com" />
        <ValidationMessage For="() => Input.Email" class="validation-message" />
    </div>
    
    <div class="form-group">
        <label class="form-label">Contraseña</label>
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Tu contraseña" />
        <ValidationMessage For="() => Input.Password" class="validation-message" />
    </div>
    
    <div class="checkbox-container">
        <InputCheckbox @bind-Value="Input.RememberMe" />
        <label>Recordarme</label>
    </div>
    
    <button type="submit" class="btn-primary">Iniciar Sesión</button>
    
    <div class="auth-links">
        <a href="Account/ForgotPassword">¿Olvidaste tu contraseña?</a>
    </div>
</EditForm>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Usuario registrado.");
            
            // Obtener el usuario y verificar su rol
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null && user.UserType == UserType.Client)
            {
                // Redirigir clientes directamente a file-manager
                RedirectManager.RedirectTo("/file-manager");
            }
            else
            {
                // Redirigir otros usuarios según ReturnUrl
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Cuenta de usuario bloqueada.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Usuario y/o contrasena invalidos";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
