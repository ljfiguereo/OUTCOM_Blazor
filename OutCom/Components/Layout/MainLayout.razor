@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- GLOBAL-LOADER -->
@*<div id="global-loader">
    <img src="images/loader.svg" class="loader-img" alt="Loader">
</div>*@

<!-- PAGE -->
<div class="page">
    <div class="page-main">
        <!-- app-Header -->
        <NavHeader />

        <NavMenu />
        <div class="jumps-prevent" style="padding-top: 74px;"></div>
        <!--app-content open-->
        <div class="main-content app-content mt-5">
            <div class="side-app">

                <!-- CONTAINER -->
                <div class="main-container container-fluid">
                    @Body
                </div>
                <!-- CONTAINER CLOSED -->
            </div>
        </div>
    </div>

    <!-- FOOTER -->
    <footer class="footer">
        <div class="container">
            <div class="row align-items-center flex-row-reverse">
                <div class="col-md-12 col-sm-12 text-center">
                    Copyright © <span id="year"></span> <a href="javascript:void(0)">Sash</a>. Designed with <span class="fa fa-heart text-danger"></span> by <a href="javascript:void(0)"> Spruko </a> All rights reserved.
                </div>
            </div>
        </div>
    </footer>
</div>

<!-- BACK-TO-TOP -->
<a href="#top" id="back-to-top"><i class="fa fa-angle-up"></i></a>

<MainLayoutScripts />

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private AuthenticationState? authenticationState;
    private bool isAdmin = false;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authenticationState.User.Identity?.IsAuthenticated ?? false;
        
        if (isAuthenticated)
        {
            isAdmin = authenticationState.User.IsInRole("Admin");
        }
    }
}

