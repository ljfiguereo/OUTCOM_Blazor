
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using OutCom.Data
@using OutCom.Services
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IUserManagementService UserManagementService

<div class="app-header header sticky">
    <div class="container-fluid main-container">
        <div class="d-flex">
            <a aria-label="Hide Sidebar" class="app-sidebar__toggle" data-bs-toggle="sidebar" href="javascript:void(0)"></a>
            <!-- sidebar-toggle-->
            <a class="logo-horizontal " href="/">
                <img src="images/brand/logo-white.png" class="header-brand-img desktop-logo" alt="logo">
                <img src="images/brand/logo-dark.png" class="header-brand-img light-logo1"
                     alt="logo">
            </a>
            <!-- LOGO -->
            <div class="main-header-center ms-3 d-none d-lg-block">
                <input type="text" class="form-control" id="typehead" placeholder="Search for results...">
                <button class="btn px-0 pt-2"><i class="fe fe-search" aria-hidden="true"></i></button>
            </div>
            <div class="d-flex order-lg-2 ms-auto header-right-icons">
                <!-- SEARCH -->
                <button class="navbar-toggler navresponsive-toggler d-lg-none ms-auto" type="button"
                        data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent-4"
                        aria-controls="navbarSupportedContent-4" aria-expanded="false"
                        aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fe fe-more-vertical"></span>
                </button>
                <div class="navbar navbar-collapse responsive-navbar p-0">
                    <div class="collapse navbar-collapse" id="navbarSupportedContent-4">
                        <div class="d-flex order-lg-2">
                            <!-- FULL-SCREEN -->
                            <div class="dropdown d-flex">
                                <a class="nav-link icon full-screen-link nav-link-bg">
                                    <i class="fe fe-minimize fullscreen-button"></i>
                                </a>
                            </div>

                            <!-- SIDE-MENU -->
                            <AuthorizeView>
                                <Authorized>
                                    <div class="dropdown d-flex profile-1">
                                        <a href="javascript:void(0)" data-bs-toggle="dropdown" class="nav-link leading-none d-flex position-relative">
                                            @if (!string.IsNullOrEmpty(userEmail))
                                            {
                                                <div class="avatar avatar-md brround" style="background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; font-size: 16px;">
                                                    @GetUserInitials(context.User.Identity.Name)
                                                </div>
                                            }
                                            else
                                            {
                                                <img src="images/users/21.jpg" alt="profile-user" class="avatar profile-user brround cover-image">
                                            }
                                            @if (isUserOnline)
                                            {
                                                <span class="avatar-status bg-green"></span>
                                            }
                                        </a>
                                        <div class="dropdown-menu dropdown-menu-end dropdown-menu-arrow profile-dropdown" style="min-width: 280px;">
                                            <!-- User Info Header -->
                                            <div class="drop-heading border-bottom pb-3 mb-3">
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(userEmail))
                                                    {
                                                        <div class="avatar avatar-lg brround me-3" style="background: linear-gradient(45deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; font-size: 18px;">
                                                            @GetUserInitials(context.User.Identity.Name)
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <img src="images/users/21.jpg" alt="profile-user" class="avatar avatar-lg brround me-3">
                                                    }
                                                    <div class="flex-fill">
                                                        <h6 class="text-dark mb-1 fs-14 fw-semibold">@context.User.Identity.Name</h6>
                                                        <p class="text-muted mb-1 fs-12">@userEmail</p>
                                                        <div class="d-flex align-items-center">
                                                            <span class="badge bg-success-transparent me-2">
                                                                @if (context.User.IsInRole("Admin"))
                                                                {
                                                                    <i class="fe fe-shield me-1"></i><text>Administrador</text>
                                                                }
                                                                else
                                                                {
                                                                    <i class="fe fe-user me-1"></i><text>Usuario</text>
                                                                }
                                                            </span>
                                                            @if (isUserOnline)
                                                            {
                                                                <span class="badge bg-success-transparent">
                                                                    <i class="fe fe-circle me-1" style="font-size: 8px;"></i>En línea
                                                                </span>
                                                            }
                                                        </div>
                                                        <small class="text-muted fs-11">
                                                            <i class="fe fe-clock me-1"></i>Último acceso: @lastLoginTime
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Profile Section -->
                                            <div class="dropdown-section mb-2">
                                                <a class="dropdown-item d-flex align-items-center py-2" href="/profile">
                                                    <i class="dropdown-icon fe fe-user me-3 text-primary"></i>
                                                    <div>
                                                        <span class="fw-medium">Mi Perfil</span>
                                                        <small class="d-block text-muted">Ver y editar información personal</small>
                                                    </div>
                                                </a>
                                            </div>

                                            <div class="dropdown-divider my-2"></div>

                                            <!-- Security Section -->
                                            <div class="dropdown-section mb-2">
                                                <button class="dropdown-item d-flex align-items-center py-2" @onclick="OpenChangePasswordModal" type="button">
                                                    <i class="dropdown-icon fe fe-lock me-3 text-warning"></i>
                                                    <div>
                                                        <span class="fw-medium">Cambiar Contraseña</span>
                                                        <small class="d-block text-muted">Actualizar credenciales de acceso</small>
                                                    </div>
                                                </button>
                                                <div class="dropdown-item d-flex align-items-center py-2">
                                                    <i class="dropdown-icon fe fe-smartphone me-3 text-success"></i>
                                                    <div>
                                                        <span class="fw-medium">Dispositivos Activos</span>
                                                        <small class="d-block text-muted">@activeDevicesCount dispositivos conectados</small>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="dropdown-divider my-2"></div>

                                            <!-- Session Management -->
                                            <div class="dropdown-section mb-2">
                                                <a class="dropdown-item d-flex align-items-center py-2 text-danger" href="javascript:void(0)" @onclick="Logout">
                                                    <i class="dropdown-icon fe fe-power me-3"></i>
                                                    <div>
                                                        <span class="fw-medium">Cerrar Sesión</span>
                                                        <small class="d-block text-muted">Salir de esta sesión</small>
                                                    </div>
                                                </a>
                                            </div>

                                            <!-- Session Info Footer -->
                                            <div class="dropdown-footer border-top pt-2 mt-2">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="fe fe-clock me-1"></i>Sesión: @sessionDuration
                                                    </small>
                                                    <small class="text-muted">
                                                        <i class="fe fe-wifi me-1"></i>IP: @userIpAddress
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </Authorized>
                                <NotAuthorized>
                                    <a href="Account/Login" class="btn btn-primary">
                                        <i class="fe fe-log-in"></i> Iniciar Sesión
                                    </a>
                                </NotAuthorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Cambio de Contraseña -->
<div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg shadow-lg">
        <div class="modal-content border-0 rounded-4">
            <!-- Header del Modal -->
            <div class="bg-primary border-0 modal-header text-white">
                <div class="d-flex align-items-center">
                    <i class="fa fa-key me-3 fs-4"></i>
                    <div>
                        <h5 class="modal-title mb-0 fw-bold" id="changePasswordModalLabel">Cambiar Contraseña</h5>
                        <small class="opacity-75">Actualiza tu contraseña de forma segura</small>
                    </div>
                </div>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Cerrar">x</button>
            </div>

            <div class="modal-body p-4">
                <EditForm Model="changePasswordModel" OnValidSubmit="ChangePassword">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <!-- Mensaje de Estado -->
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert @(isError ? "alert-danger" : "alert-success") alert-dismissible fade show d-flex align-items-center" role="alert">
                            <i class="@(isError ? "fa fa-exclamation-triangle" : "fa fa-check-circle") me-2"></i>
                            <div class="flex-grow-1">@statusMessage</div>
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
                        </div>
                    }

                    <!-- Contraseña Actual -->
                    <div class="mb-4">
                        <label for="currentPassword" class="form-label fw-semibold text-dark">
                            <i class="fa fa-lock me-2 text-primary"></i>Contraseña Actual
                        </label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-end-0">
                                <i class="fa fa-shield-alt text-muted"></i>
                            </span>
                            <input type="@(showCurrentPassword ? "text" : "password")" 
                                   class="form-control border-start-0 ps-0" 
                                   id="currentPassword" 
                                   @bind="currentPassword" 
                                   placeholder="Ingresa tu contraseña actual"
                                   required 
                                   aria-describedby="currentPasswordHelp" />
                            <button type="button" 
                                    class="btn btn-outline-secondary border-start-0" 
                                    @onclick="() => showCurrentPassword = !showCurrentPassword"
                                    aria-label="@(showCurrentPassword ? "Ocultar" : "Mostrar") contraseña">
                                <i class="fa @(showCurrentPassword ? "fa-eye-slash" : "fa-eye")"></i>
                            </button>
                        </div>
                        <div id="currentPasswordHelp" class="form-text">
                            <i class="fa fa-info-circle me-1"></i>Ingresa tu contraseña actual para verificar tu identidad
                        </div>
                    </div>

                    <!-- Nueva Contraseña -->
                    <div class="mb-3">
                        <label for="newPassword" class="form-label fw-semibold text-dark">
                            <i class="fa fa-key me-2 text-success"></i>Nueva Contraseña
                        </label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-end-0">
                                <i class="fa fa-lock text-muted"></i>
                            </span>
                            <InputText class="form-control border-start-0 border-end-0 ps-0" 
                                       id="newPassword" 
                                       @bind-Value="changePasswordModel.NewPassword" 
                                       type="@(showNewPassword ? "text" : "password")"
                                       placeholder="Crea una contraseña segura"
                                       @oninput="OnNewPasswordInput"
                                       aria-describedby="newPasswordHelp" />
                            <button type="button" 
                                    class="btn btn-outline-secondary" 
                                    @onclick="() => showNewPassword = !showNewPassword"
                                    aria-label="@(showNewPassword ? "Ocultar" : "Mostrar") contraseña">
                                <i class="fa @(showNewPassword ? "fa-eye-slash" : "fa-eye")"></i>
                            </button>
                        </div>
                        
                        <!-- Indicador de Fortaleza de Contraseña -->
                        <div class="mt-2">
                            <div class="d-flex justify-content-between align-items-center mb-1">
                                <small class="text-muted">Fortaleza de la contraseña:</small>
                                <small id="passwordStrengthText" class="fw-semibold">Muy débil</small>
                            </div>
                            <div class="progress" style="height: 6px;">
                                <div id="passwordStrengthBar" 
                                     class="progress-bar transition-all" 
                                     role="progressbar" 
                                     style="width: 0%" 
                                     aria-valuenow="0" 
                                     aria-valuemin="0" 
                                     aria-valuemax="100"></div>
                            </div>
                        </div>
                        
                        <div id="newPasswordHelp" class="form-text mt-2">
                            <i class="fa fa-lightbulb me-1"></i>Usa al menos 8 caracteres con mayúsculas, minúsculas, números y símbolos
                        </div>
                        <ValidationMessage For="@(() => changePasswordModel.NewPassword)" class="text-danger small mt-1" />
                    </div>

                    <!-- Confirmar Nueva Contraseña -->
                    <div class="mb-4">
                        <label for="confirmPassword" class="form-label fw-semibold text-dark">
                            <i class="fa fa-check-double me-2 text-info"></i>Confirmar Nueva Contraseña
                        </label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-end-0">
                                <i class="fa fa-lock text-muted"></i>
                            </span>
                            <InputText class="form-control border-start-0 border-end-0 ps-0" 
                                       id="confirmPassword" 
                                       @bind-Value="changePasswordModel.ConfirmPassword" 
                                       type="@(showConfirmPassword ? "text" : "password")"
                                       placeholder="Confirma tu nueva contraseña"
                                       aria-describedby="confirmPasswordHelp" />
                            <button type="button" 
                                    class="btn btn-outline-secondary" 
                                    @onclick="() => showConfirmPassword = !showConfirmPassword"
                                    aria-label="@(showConfirmPassword ? "Ocultar" : "Mostrar") contraseña">
                                <i class="fa @(showConfirmPassword ? "fa-eye-slash" : "fa-eye")"></i>
                            </button>
                        </div>
                        <div id="confirmPasswordHelp" class="form-text">
                            <i class="fa fa-info-circle me-1"></i>Repite la nueva contraseña para confirmar
                        </div>
                        <ValidationMessage For="@(() => changePasswordModel.ConfirmPassword)" class="text-danger small mt-1" />
                    </div>

                    <!-- Footer del Modal -->
                    <div class="modal-footer border-0 bg-light p-4">
                            <button type="button" class="btn btn-outline-secondary btn-lg px-4" data-bs-dismiss="modal"
                                    disabled="@isProcessing">
                                <i class="fa fa-times me-2"></i>Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary btn-lg px-4" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Procesando...</span>
                                }
                                else
                                {
                                    <i class="fa fa-save me-2"></i>
                                    <span>Cambiar Contraseña</span>
                                }
                            </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private string userEmail = "";
    private bool isUserOnline = true;
    private string lastLoginTime = "";
    private int activeDevicesCount = 1;
    private string sessionDuration = "";
    private string userIpAddress = "";
    private DateTime sessionStartTime = DateTime.Now;

    // Change Password Modal variables
    private bool showChangePasswordModal = false;
    private string currentPassword = string.Empty;
    private ChangePasswordModel changePasswordModel = new();
    private bool isProcessing = false;
    private string statusMessage = string.Empty;
    private bool isError = false;
    private bool showCurrentPassword = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();

        // Simular actualización del tiempo de sesión cada minuto
        var timer = new System.Threading.Timer(UpdateSessionInfo, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    private async Task LoadUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            // Obtener email del usuario desde claims
            userEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value ?? "usuario@outcom.com";

            // Simular datos de sesión (en una aplicación real, estos vendrían de la base de datos)
            lastLoginTime = DateTime.Now.AddHours(-2).ToString("dd/MM/yyyy HH:mm");
            activeDevicesCount = new Random().Next(1, 4);
            userIpAddress = "192.168.1." + new Random().Next(1, 255);

            UpdateSessionInfo(null);
        }
    }

    private void UpdateSessionInfo(object state)
    {
        var duration = DateTime.Now - sessionStartTime;
        if (duration.TotalHours >= 1)
        {
            sessionDuration = $"{(int)duration.TotalHours}h {duration.Minutes}m";
        }
        else
        {
            sessionDuration = $"{duration.Minutes}m";
        }

        InvokeAsync(StateHasChanged);
    }

    private string GetUserInitials(string fullName)
    {
        if (string.IsNullOrEmpty(fullName))
            return "U";

        var names = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (names.Length == 1)
            return names[0].Substring(0, Math.Min(2, names[0].Length)).ToUpper();

        return (names[0].Substring(0, 1) + names[names.Length - 1].Substring(0, 1)).ToUpper();
    }

    private async Task Logout()
    {
        // Crear un formulario para hacer POST al endpoint de logout
        var form = new Dictionary<string, string>
        {
            ["returnUrl"] = "logout"
        };

        // Redirigir al endpoint de logout que manejará el cierre de sesión
        Navigation.NavigateTo("/Account/Logout", forceLoad: true);
    }

    private async Task LogoutAllDevices()
    {
        // En una aplicación real, aquí se invalidarían todas las sesiones del usuario
        // Por ahora, simplemente redirigimos al logout
        Navigation.NavigateTo("/logout?all=true", true);
    }

    private async Task ToggleTheme()
    {
        // Implementar cambio de tema
        // En una aplicación real, esto cambiaría la configuración del tema del usuario
        await Task.CompletedTask;
    }

    private async Task OpenChangePasswordModal()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        changePasswordModel = new ChangePasswordModel { UserId = userId ?? string.Empty };
        currentPassword = string.Empty;
        statusMessage = string.Empty;
        isError = false;
        await JSRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('changePasswordModal')).show()");
    }

    private async Task CloseChangePasswordModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('changePasswordModal')).hide()");
    }

    private async Task OnNewPasswordInput(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? string.Empty;
        changePasswordModel.NewPassword = password;
        
        // Actualizar el indicador de fortaleza usando JavaScript
        await JSRuntime.InvokeVoidAsync("updatePasswordStrength", password);
    }

    private async Task ChangePassword()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId)) return;

        // Validaciones adicionales
        if (string.IsNullOrEmpty(currentPassword))
        {
            statusMessage = "La contraseña actual es requerida.";
            isError = true;
            return;
        }

        if (string.IsNullOrEmpty(changePasswordModel.NewPassword))
        {
            statusMessage = "La nueva contraseña es requerida.";
            isError = true;
            return;
        }

        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmPassword)
        {
            statusMessage = "Las contraseñas no coinciden.";
            isError = true;
            return;
        }

        if (changePasswordModel.NewPassword.Length < 6)
        {
            statusMessage = "La contraseña debe tener al menos 6 caracteres.";
            isError = true;
            return;
        }

        try
        {
            isProcessing = true;
            statusMessage = string.Empty;

            // Verificar la contraseña actual
            var user = await UserManager.FindByIdAsync(userId);
            if (user == null)
            {
                statusMessage = "Usuario no encontrado.";
                isError = true;
                return;
            }

            var checkPassword = await UserManager.CheckPasswordAsync(user, currentPassword);
            if (!checkPassword)
            {
                statusMessage = "La contraseña actual es incorrecta.";
                isError = true;
                return;
            }

            // Cambiar la contraseña
            var result = await UserManager.ChangePasswordAsync(user, currentPassword, changePasswordModel.NewPassword);

            if (result.Succeeded)
            {
                statusMessage = "Contraseña actualizada exitosamente.";
                isError = false;

                // Refrescar la sesión
                //await SignInManager.RefreshSignInAsync(user);
                StateHasChanged();

                // Cerrar el modal después de un breve delay
                await Task.Delay(2000);
                await CloseChangePasswordModal();
            }
            else
            {
                statusMessage = $"Error al cambiar contraseña: {string.Join(", ", result.Errors.Select(e => e.Description))}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            isError = true;
        }
        finally
        {
            isProcessing = false;
        }
    }

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "El ID del usuario es requerido.")]
        public string UserId { get; set; } = string.Empty;

        [Required(ErrorMessage = "La nueva contraseña es requerida.")]
        [StringLength(100, ErrorMessage = "La contraseña debe tener al menos {2} caracteres.", MinimumLength = 6)]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "La confirmación de contraseña es requerida.")]
        [Compare("NewPassword", ErrorMessage = "Las contraseñas no coinciden.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
